---
# Source: union-operator/templates/namespaces.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: flytesnacks-development
---
# Source: union-operator/templates/namespaces.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: flytesnacks-staging
---
# Source: union-operator/templates/namespaces.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: flytesnacks-production
---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytepropeller
  namespace: union
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.2.0-b1
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a Service Account for webhook
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-pod-webhook
  namespace: union
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/charts/union/templates/common/secret-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-secret-auth
  namespace: union
type: Opaque
stringData:
  client_secret: 'ghijklm'
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create an empty secret that the first propeller pod will populate
apiVersion: v1
kind: Secret
metadata:
  name: flyte-pod-webhook
  namespace: union
type: Opaque
---
# Source: union-operator/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: union-operator
type: Opaque
stringData:
  app_secret: ghijklm
---
# Source: union-operator/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: union-operator-cluster-name
type: Opaque
data:
  cluster_name: "Y2x1c3Rlcm5hbWU="
---
# Source: union-operator/charts/union/templates/clusterresourcesync/cluster_resource_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clusterresource-template
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.2.0-b1
    app.kubernetes.io/managed-by: Helm
data:
  a_namespace.yaml.yaml: | 
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
    spec:
      finalizers:
      - kubernetes
    
  b_default_service_account.yaml.yaml: | 
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: default
      namespace: {{ namespace }}
      annotations:
        {{ defaultUserRoleKey }}: {{ defaultUserRoleValue }}
    
  c_project_resource_quota.yaml.yaml: | 
    apiVersion: v1
    kind: ResourceQuota
    metadata:
      name: project-quota
      namespace: {{ namespace }}
    spec:
      hard:
        limits.cpu: {{ projectQuotaCpu }}
        limits.memory: {{ projectQuotaMemory }}
        limits.nvidia.com/gpu: {{ projectQuotaNvidiaGpu }}
---
# Source: union-operator/charts/union/templates/clusterresourcesync/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-clusterresourcesync-config
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.2.0-b1
    app.kubernetes.io/managed-by: Helm
data:
  cluster_resources.yaml: | 
    cluster_resources:
      customData:
      - production:
        - projectQuotaCpu:
            value: "64"
        - projectQuotaMemory:
            value: 32Gi
        - projectQuotaNvidiaGpu:
            value: "1"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      - staging:
        - projectQuotaCpu:
            value: "64"
        - projectQuotaMemory:
            value: 32Gi
        - projectQuotaNvidiaGpu:
            value: "1"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      - development:
        - projectQuotaCpu:
            value: "64"
        - projectQuotaMemory:
            value: 32Gi
        - projectQuotaNvidiaGpu:
            value: "1"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      refreshInterval: 5m
      standaloneDeployment: true
      templatePath: /etc/flyte/clusterresource/templates
  admin.yaml: | 
    admin:
      clientId: 'abcdef'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: 'dns:///playground.hosted.unionai.cloud'
      insecure: false
    event:
      capacity: 1000
      rate: 500
      type: admin
  domain.yaml: | 
    domains:
    - id: development
      name: development
    - id: staging
      name: staging
    - id: production
      name: production
---
# Source: union-operator/charts/union/templates/propeller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-propeller-config
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.2.0-b1
    app.kubernetes.io/managed-by: Helm
data:
  admin.yaml: | 
    admin:
      clientId: 'abcdef'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: 'dns:///playground.hosted.unionai.cloud'
      insecure: false
    event:
      capacity: 1000
      rate: 500
      type: admin
  catalog.yaml: | 
    catalog-cache:
      endpoint: 'dns:///playground.hosted.unionai.cloud'
      insecure: false
      type: datacatalog
      use-admin-auth: true
  copilot.yaml: | 
    plugins:
      k8s:
        co-pilot:
          image: cr.flyte.org/flyteorg/flytecopilot-release:v1.2.0-b1
          name: flyte-copilot-
          start-timeout: 30s
  core.yaml: | 
    manager:
      pod-application: flytepropeller
      pod-template-container-name: flytepropeller
      pod-template-name: flytepropeller-template
      shard:
        shard-count: 3
        type: Hash
    propeller:
      downstream-eval-duration: 30s
      enable-admin-launcher: true
      event-config:
        raw-output-policy: inline
      leader-election:
        enabled: false
        lease-duration: 15s
        lock-config-map:
          name: propeller-leader
          namespace: flyte
        renew-deadline: 10s
        retry-period: 2s
      limit-namespace: all
      max-workflow-retries: 30
      metadata-prefix: metadata/propeller
      metrics-prefix: flyte
      prof-port: 10254
      queue:
        batch-size: -1
        batching-interval: 2s
        queue:
          base-delay: 5s
          capacity: 1000
          max-delay: 120s
          rate: 100
          type: maxof
        sub-queue:
          capacity: 100
          rate: 10
          type: bucket
        type: batch
      rawoutput-prefix: 's3://my-s3-bucket'
      workers: 4
      workflow-reeval-duration: 30s
    webhook:
      certDir: /etc/webhook/certs
      serviceName: flyte-pod-webhook
  enabled_plugins.yaml: | 
    tasks:
      task-plugins:
        default-for-task-types:
          container: container
          container_array: k8s-array
          sidecar: sidecar
        enabled-plugins:
        - container
        - sidecar
        - k8s-array
  k8s.yaml: | 
    plugins:
      k8s:
        default-cpus: 100m
        default-env-vars:
        - FLYTE_AWS_ENDPOINT: http://minio.union.svc.cluster.local:9000
        - FLYTE_AWS_ACCESS_KEY_ID: minio
        - FLYTE_AWS_SECRET_ACCESS_KEY: miniostorage
        default-memory: 100Mi
  logger.yaml: | 
    logger:
      level: 4
      show-source: true
  resource_manager.yaml: | 
    propeller:
      resourcemanager:
        type: noop
  storage.yaml: | 
    storage:
      type: minio
      container: "my-s3-bucket-prod"
      stow:
        kind: s3
        config:
          access_key_id: minio
          auth_type: accesskey
          secret_key: miniostorage
          disable_ssl: true
          endpoint: http://minio.union.svc.cluster.local:9000
          region: us-east-1
      signedUrl:
        stowConfigOverride:
          endpoint: http://localhost:30084
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
  cache.yaml: |
    cache:
      max_size_mbs: 0
      target_gc_percent: 70
  task_logs.yaml: | 
    plugins:
      logs:
        cloudwatch-enabled: false
        kubernetes-enabled: true
---
# Source: union-operator/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    union:
      connection:
        host: dns:///playground.hosted.unionai.cloud
      auth:
        type: ClientSecret
        clientId: abcdef
        clientSecretLocation: /etc/union/secret/app_secret
    operator:
      enabled: true
      clusterId:
        organization: playground
      propellerHeartbeat:
        endpoint: http://flytepropeller.union.svc.cluster.local:10254
      clusterData:
        appId: abcdef
        cloudHostName: playground.hosted.unionai.cloud
        metadataBucketPrefix: s3://my-s3-bucket
        bucketName:  my-s3-bucket
        bucketRegion: us-east-2
        userRoleKey: foo
        userRole: bar
        storageType: sandbox
        gcpProjectId: dummy-gcs-projectId
  logger.yaml: |
    logger:
      level: 4
      show-source: true
---
# Source: union-operator/charts/union/templates/propeller/crds/flyteworkflow.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: flyteworkflows.flyte.lyft.com
spec:
  group: flyte.lyft.com
  names:
    kind: FlyteWorkflow
    plural: flyteworkflows
    shortNames:
      - fly
    singular: flyteworkflow
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          x-kubernetes-preserve-unknown-fields: true
          properties:
---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.2.0-b1
    app.kubernetes.io/managed-by: Helm
rules:
# Allow RO access to PODS
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
# Allow Event recording access
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - delete
  - patch
# Allow Access All plugin objects
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
# Allow Access to CRD
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
# Allow Access to all resources under flyte.lyft.com
- apiGroups:
  - flyte.lyft.com
  resources:
  - flyteworkflows
  - flyteworkflows/finalizers
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
  - post
  - deletecollection
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a ClusterRole for the webhook
# https://kubernetes.io/docs/admin/authorization/rbac/
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: union-flyte-pod-webhook
  namespace: union
rules:
  - apiGroups:
      - "*"
    resources:
      - mutatingwebhookconfigurations
      - secrets
      - pods
      - replicasets/finalizers
    verbs:
      - get
      - create
      - update
      - patch
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
  # Allow Access to all resources under flyte.lyft.com
  - apiGroups:
      - flyte.lyft.com
    resources:
      - flyteworkflows
      - flyteworkflows/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
      - patch
      - post
      - deletecollection
  - apiGroups:
      - '*'
    resources:
      - resourcequotas
      - pods
      - configmaps
      - podtemplates
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.2.0-b1
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-flytepropeller
subjects:
- kind: ServiceAccount
  name: flytepropeller
  namespace: union
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a binding from Role -> ServiceAccount
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: union-flyte-pod-webhook
  namespace: union
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-flyte-pod-webhook
subjects:
  - kind: ServiceAccount
    name: flyte-pod-webhook
    namespace: union
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-operator
subjects:
  - kind: ServiceAccount
    name: union-operator
    namespace: union
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Service
apiVersion: v1
kind: Service
metadata:
  name: flyte-pod-webhook
  namespace: union
  annotations: 
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  selector:
    app: flyte-pod-webhook
  ports:
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9443
---
# Source: union-operator/templates/minio/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: union
  labels: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
  - name: minio
    nodePort: 30084
    port: 9000
    protocol: TCP
    targetPort: minio
  - name: minio-console
    nodePort: 30087
    port: 9001
    protocol: TCP
    targetPort: minio-console
  selector: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: union-operator
---
# Source: union-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: debug
      protocol: TCP
      name: debug
  selector:
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
---
# Source: union-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flytepropeller
spec:
  ports:
    - port: 10254
  selector:
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
---
# Source: union-operator/charts/union/templates/clusterresourcesync/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: syncresources
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteclusterresourcesync
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.2.0-b1
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteclusterresourcesync
      app.kubernetes.io/instance: union-operator
  template:
    metadata:
      annotations:
        configChecksum: "39d7866d5acf93aadced5374e4142c06a78b96d2a0648a9845737f1b7f54a96"
      labels: 
        app.kubernetes.io/name: flyteclusterresourcesync
        app.kubernetes.io/instance: union-operator
        helm.sh/chart: union-v1.2.0-b1
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - command:
            - flyteadmin
            - --config
            - /etc/flyte/config/*.yaml
            - clusterresource
            - run
          image: "cr.flyte.org/flyteorg/flyteadmin-release:v1.2.0-b1"
          imagePullPolicy: "IfNotPresent"
          name: sync-cluster-resources
          volumeMounts:
          - name: auth
            mountPath: /etc/secrets/
          - mountPath: /etc/flyte/clusterresource/templates
            name: resource-templates
          - mountPath: /etc/flyte/config
            name: config-volume
      serviceAccountName: flytepropeller
      volumes:
        
        - configMap:
            name: clusterresource-template
          name: resource-templates
        - configMap:
            name: flyte-clusterresourcesync-config
          name: config-volume
        - name: auth
          secret:
            secretName: flyte-secret-auth
---
# Source: union-operator/charts/union/templates/propeller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: union
  name: flytepropeller-manager
  labels: 
    app.kubernetes.io/name: flytepropeller-manager
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.2.0-b1
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flytepropeller-manager
      app.kubernetes.io/instance: union-operator
  template:
    metadata:
      annotations:
        configChecksum: "cc209c96d5b175bbe0a430b17ba17f4f3c170755ac6b5e9c008f644b41a1403"
      labels: 
        app.kubernetes.io/name: flytepropeller-manager
        app.kubernetes.io/instance: union-operator
        helm.sh/chart: union-v1.2.0-b1
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      containers:
      - command:
        - flytepropeller-manager
        - --manager.pod-template-namespace
        - union
        - --config
        - /etc/flyte/config/*.yaml
        - --propeller.cluster-id
        - 'clustername'
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.2.0-b1"
        imagePullPolicy: "IfNotPresent"
        name: flytepropeller-manager
        ports:
        - containerPort: 10254
        resources: 
          limits:
            cpu: "4"
            ephemeral-storage: 500Mi
            memory: 8Gi
          requests:
            cpu: "1"
            ephemeral-storage: 100Mi
            memory: 500Mi
        volumeMounts:
          - name: config-volume
            mountPath: /etc/flyte/config
          - name: auth
            mountPath: /etc/secrets/
      serviceAccountName: flytepropeller
      volumes:
      - configMap:
          name: flyte-propeller-config
        name: config-volume
      - name: auth
        secret:
          secretName: flyte-secret-auth
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create the actual deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyte-pod-webhook
  namespace: union
  labels:
    app: flyte-pod-webhook
spec:
  selector:
    matchLabels:
      app: flyte-pod-webhook
  template:
    metadata:
      labels:
        app: flyte-pod-webhook
        app.kubernetes.io/name: flyte-pod-webhook
        app.kubernetes.io/version: v1.2.0-b1
      annotations:
        configChecksum: "cc209c96d5b175bbe0a430b17ba17f4f3c170755ac6b5e9c008f644b41a1403"
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      serviceAccountName: flyte-pod-webhook
      initContainers:
      - name: generate-secrets
        image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.2.0-b1"
        imagePullPolicy: "IfNotPresent"
        command:
          - flytepropeller
        args:
          - webhook
          - init-certs
          - --config
          - /etc/flyte/config/*.yaml
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        volumeMounts:
          - name: config-volume
            mountPath: /etc/flyte/config
      containers:
        - name: webhook
          image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.2.0-b1"
          imagePullPolicy: "IfNotPresent"
          command:
            - flytepropeller
          args:
            - webhook
            - --config
            - /etc/flyte/config/*.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: config-volume
              mountPath: /etc/flyte/config
              readOnly: true
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: flyte-propeller-config
        - name: webhook-certs
          secret:
            secretName: flyte-pod-webhook
---
# Source: union-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: union-operator
      app.kubernetes.io/instance: union-operator
  template:
    metadata:
      annotations:
        configChecksum: "05de83ea8a4aeb94b076db58d2aea7d8d4dd1b9a1e4bdf363c7a4b3b1f7a364"
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
        configChecksum: "05de83ea8a4aeb94b076db58d2aea7d8d4dd1b9a1e4bdf363c7a4b3b1f7a364"
      labels:
        app.kubernetes.io/name: union-operator
        app.kubernetes.io/instance: union-operator
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: union-operator
      securityContext:
        {}
      volumes:
        - name: config-volume
          configMap:
            name: union-operator
        - name: secret-volume
          secret:
            secretName: union-operator
      containers:
        - name: union-operator
          securityContext:
            {}
          image: "public.ecr.aws/p0i0a9q8/unionoperator:f03d060f44edac885afa978148b907730a49a0ab"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: "4"
              ephemeral-storage: 500Mi
              memory: 8Gi
            requests:
              cpu: "1"
              ephemeral-storage: 100Mi
              memory: 500Mi
          volumeMounts:
            - mountPath: /etc/union/config
              name: config-volume
            - mountPath: /etc/union/secret
              name: secret-volume
          env:
            - name: CLUSTER_NAME
              valueFrom:
                secretKeyRef:
                  name: union-operator-cluster-name
                  key: cluster_name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          args:
            - operator
            - --config
            - /etc/union/config/*.yaml
            - --operator.clusterId.name
            - "$(CLUSTER_NAME)"
            - --operator.clusterPoolName
            - default
          ports:
            - name: debug
              containerPort: 10254
              protocol: TCP
---
# Source: union-operator/templates/minio/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: union
  labels: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: union-operator
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: minio
        app.kubernetes.io/instance: union-operator
        helm.sh/chart: union-operator-v0.0.1
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - image: "ecr.flyte.org/bitnami/minio:2021.10.13-debian-10-r0"
        imagePullPolicy: "IfNotPresent"
        name: minio
        env:
          - name: MINIO_ACCESS_KEY
            value: minio
          - name: MINIO_SECRET_KEY
            value: miniostorage
          - name: MINIO_DEFAULT_BUCKETS
            value: my-s3-bucket
        ports:
        - containerPort: 9000
          name: minio
        - containerPort: 9001
          name: minio-console
        resources: 
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
        volumeMounts:
        - name: minio-storage
          mountPath: /data
      volumes:
      - name: minio-storage
        emptyDir: {}
---
# Source: union-operator/charts/union/templates/propeller/manager.yaml
apiVersion: v1
kind: PodTemplate
metadata:
  name: flytepropeller-template
  namespace: union
template:
  metadata:
    annotations:
      configChecksum: "cc209c96d5b175bbe0a430b17ba17f4f3c170755ac6b5e9c008f644b41a1403"
    labels: 
      app.kubernetes.io/name: flytepropeller
      app.kubernetes.io/instance: union-operator
      helm.sh/chart: union-v1.2.0-b1
      app.kubernetes.io/managed-by: Helm
      app: flytepropeller
  spec:
    securityContext:
      fsGroup: 65534
      runAsUser: 1001
      fsGroupChangePolicy: "Always"
    containers:
    - command:
      - flytepropeller
      - --config
      - /etc/flyte/config/*.yaml
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.2.0-b1"
      imagePullPolicy: "IfNotPresent"
      name: flytepropeller
      ports:
      - containerPort: 10254
      resources: 
        limits:
          cpu: "4"
          ephemeral-storage: 500Mi
          memory: 8Gi
        requests:
          cpu: "1"
          ephemeral-storage: 100Mi
          memory: 500Mi
      volumeMounts:
        - name: config-volume
          mountPath: /etc/flyte/config
        - name: auth
          mountPath: /etc/secrets/
    serviceAccountName: flytepropeller
    volumes:
    - configMap:
        name: flyte-propeller-config
      name: config-volume
    - name: auth
      secret:
        secretName: flyte-secret-auth
