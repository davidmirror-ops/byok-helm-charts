---
# Source: union-operator/templates/namespaces.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: flytesnacks-development
---
# Source: union-operator/templates/namespaces.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: flytesnacks-staging
---
# Source: union-operator/templates/namespaces.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: flytesnacks-production
---
# Source: union-operator/charts/opencost/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: opencost-1.12.0
    app.kubernetes.io/name: opencost
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "1.102.0"
    app.kubernetes.io/part-of: opencost
    app.kubernetes.io/managed-by: Helm
  name: opencost
  namespace: union
automountServiceAccountToken: true
---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytepropeller
  namespace: union
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.6.0
    app.kubernetes.io/managed-by: Helm
  annotations: 
    eks.amazonaws.com/role-arn: arn:aws:iam::479331373192:role/opencompute-staging-sample-tenant-adminflyterole
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a Service Account for webhook
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-pod-webhook
  namespace: union
---
# Source: union-operator/templates/cluster-resource-sync.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: clustersync-resource
  namespace: union
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/templates/monitoring/dcgm-exporter/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator-dcgm-exporter
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-dcgm-exporter
    app.kubernetes.io/instance: union-operator-dcgm-exporter
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/templates/monitoring/kube-state-metrics/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator-kube-state-metrics
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-kube-state-metrics
    app.kubernetes.io/instance: union-operator-kube-state-metrics
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/templates/monitoring/prometheus/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator-prometheus
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-prometheus
    app.kubernetes.io/instance: union-operator-prometheus
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/templates/serviceaccount-logproxy.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::479331373192:role/opencompute-staging-sample-tenant-adminflyterole
---
# Source: union-operator/charts/union/templates/common/secret-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-secret-auth
  namespace: union
type: Opaque
stringData:
  client_secret: 'ghijklm'
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create an empty secret that the first propeller pod will populate
apiVersion: v1
kind: Secret
metadata:
  name: flyte-pod-webhook
  namespace: union
type: Opaque
---
# Source: union-operator/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: union-operator
type: Opaque
stringData:
  app_secret: ghijklm
  tunnel_token: ""
---
# Source: union-operator/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: union-operator-cluster-name
type: Opaque
data:
  cluster_name: "Y2x1c3Rlcm5hbWU="
---
# Source: union-operator/templates/secret.yaml
# Secrets are required for syncresources, even if running standalone. Add empty secrets until resolved.
apiVersion: v1
kind: Secret
metadata:
  name: flyte-admin-secrets
type: Opaque
---
# Source: union-operator/charts/union/templates/clusterresourcesync/cluster_resource_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clusterresource-template
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.6.0
    app.kubernetes.io/managed-by: Helm
data:
  a_namespace.yaml.yaml: | 
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
    spec:
      finalizers:
      - kubernetes
    
  b_default_service_account.yaml.yaml: | 
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: default
      namespace: {{ namespace }}
      annotations:
        {{ defaultUserRoleKey }}: {{ defaultUserRoleValue }}
    
  c_project_resource_quota.yaml.yaml: | 
    apiVersion: v1
    kind: ResourceQuota
    metadata:
      name: project-quota
      namespace: {{ namespace }}
    spec:
      hard:
        limits.cpu: {{ projectQuotaCpu }}
        limits.memory: {{ projectQuotaMemory }}
        requests.nvidia.com/gpu: {{ projectQuotaNvidiaGpu }}
---
# Source: union-operator/charts/union/templates/clusterresourcesync/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-clusterresourcesync-config
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.6.0
    app.kubernetes.io/managed-by: Helm
data:
  cluster_resources.yaml: | 
    cluster_resources:
      customData:
      - production:
        - projectQuotaCpu:
            value: "4096"
        - projectQuotaMemory:
            value: 2Ti
        - projectQuotaNvidiaGpu:
            value: "256"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      - staging:
        - projectQuotaCpu:
            value: "4096"
        - projectQuotaMemory:
            value: 2Ti
        - projectQuotaNvidiaGpu:
            value: "256"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      - development:
        - projectQuotaCpu:
            value: "4096"
        - projectQuotaMemory:
            value: 2Ti
        - projectQuotaNvidiaGpu:
            value: "256"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      refreshInterval: 5m
      standaloneDeployment: true
      templatePath: /etc/flyte/clusterresource/templates
  admin.yaml: | 
    admin:
      clientId: 'abcdef'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: 'dns:///playground.hosted.unionai.cloud'
      insecure: false
    event:
      capacity: 1000
      rate: 500
      type: admin
  domain.yaml: | 
    domains:
    - id: development
      name: development
    - id: staging
      name: staging
    - id: production
      name: production
  clusters.yaml: |
    clusters:
      clusterConfigs: []
      labelClusterMap: {}
---
# Source: union-operator/charts/union/templates/propeller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-propeller-config
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.6.0
    app.kubernetes.io/managed-by: Helm
data:
  admin.yaml: | 
    admin:
      clientId: 'abcdef'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: 'dns:///playground.hosted.unionai.cloud'
      insecure: false
    event:
      capacity: 1000
      rate: 500
      type: admin
  catalog.yaml: | 
    catalog-cache:
      endpoint: 'dns:///playground.hosted.unionai.cloud'
      insecure: false
      type: datacatalog
      use-admin-auth: true
  copilot.yaml: | 
    plugins:
      k8s:
        co-pilot:
          image: cr.flyte.org/flyteorg/flytecopilot-release:v1.6.0
          name: flyte-copilot-
          start-timeout: 30s
  core.yaml: | 
    manager:
      pod-application: flytepropeller
      pod-template-container-name: flytepropeller
      pod-template-name: flytepropeller-template
      shard:
        shard-count: 3
        type: Hash
    propeller:
      downstream-eval-duration: 30s
      enable-admin-launcher: true
      event-config:
        raw-output-policy: inline
      leader-election:
        enabled: false
        lease-duration: 15s
        lock-config-map:
          name: propeller-leader
          namespace: flyte
        renew-deadline: 10s
        retry-period: 2s
      limit-namespace: all
      max-workflow-retries: 30
      metadata-prefix: metadata/propeller
      metrics-prefix: flyte
      prof-port: 10254
      queue:
        batch-size: -1
        batching-interval: 2s
        queue:
          base-delay: 5s
          capacity: 1000
          max-delay: 120s
          rate: 100
          type: maxof
        sub-queue:
          capacity: 100
          rate: 10
          type: bucket
        type: batch
      rawoutput-prefix: 's3://opencompute-staging-sample-tenant'
      workers: 4
      workflow-reeval-duration: 30s
    webhook:
      certDir: /etc/webhook/certs
      serviceName: flyte-pod-webhook
  enabled_plugins.yaml: | 
    tasks:
      task-plugins:
        default-for-task-types:
          container: container
          container_array: k8s-array
          sidecar: sidecar
        enabled-plugins:
        - container
        - sidecar
        - k8s-array
  k8s.yaml: | 
    plugins:
      k8s:
        default-cpus: 100m
        default-env-vars: []
        default-memory: 100Mi
  logger.yaml: | 
    logger:
      level: 4
      show-source: true
  resource_manager.yaml: | 
    propeller:
      resourcemanager:
        type: noop
  storage.yaml: | 
    storage:
      type: s3
      container: "opencompute-staging-sample-tenant"
      connection:
        auth-type: iam
        region: us-east-2
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
  cache.yaml: |
    cache:
      max_size_mbs: 0
      target_gc_percent: 70
  task_logs.yaml: | 
    plugins:
      logs:
        cloudwatch-enabled: false
        kubernetes-enabled: true
---
# Source: union-operator/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    union:
      connection:
        host: dns:///playground.hosted.unionai.cloud
      auth:
        type: ClientSecret
        clientId: abcdef
        clientSecretLocation: /etc/union/secret/app_secret
        authorizationMetadataKey: "flyte-authorization"
        tokenRefreshWindow: 5m
    operator:
      enabled: true
      enableTunnelService: true
      clusterId:
        organization: playground
      dependenciesHeartbeat:
        propeller:
          endpoint: http://flytepropeller.union.svc.cluster.local:10254
        proxy:
          endpoint: http://union-operator-proxy.union.svc.cluster.local:10254
        prometheus:
          endpoint: http://union-operator-prometheus.union.svc.cluster.local:80/prometheus/api/v1/targets
      clusterData:
        appId: abcdef
        cloudHostName: playground.hosted.unionai.cloud
        metadataBucketPrefix: s3://opencompute-staging-sample-tenant
        bucketName:  opencompute-staging-sample-tenant
        bucketRegion: us-east-2
        userRoleKey: foo
        userRole: bar
        storageType: s3
        gcpProjectId: dummy-gcs-projectId
      collectUsages:
        enabled: false
  logger.yaml: |
    logger:
      level: 4
      show-source: true
  storage.yaml: | 
    storage:
      type: s3
      container: "opencompute-staging-sample-tenant"
      connection:
        auth-type: iam
        region: us-east-2
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
---
# Source: union-operator/templates/monitoring/prometheus/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: union-operator-prometheus
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-prometheus
    app.kubernetes.io/instance: union-operator-prometheus
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
data:
  # Current config support scraping from configured kube state metrics service which serves request and limit metrics of
  # all the pods running in the data plane.(We will later restrict this to serve only from configured namespaces where
  # user pods are running). Also apart from request and limit it scrapes other metrics which come out of the box by installing
  # the service.We will further refine them to set of useful metrics that should be scraped in next iteration.
  # This installation of prometheus doesn't support scaling or retention and would be taken as immediate next step.
  # The scrape interval is of 15 sec from state metrics endpoint.
  prometheus.yml: |
    global:
      scrape_interval:     15s
      evaluation_interval: 15s
      external_labels:
        organization: union
        cluster_name: clustername
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
    rule_files:
    scrape_configs:
      - job_name: 'kube-state-metrics'
        static_configs:
        - targets: ['union-operator-kube-state-metrics.union.svc.cluster.local:8080']
        metric_relabel_configs:
        - separator: ;
          source_labels: [__name__]
          regex: kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_status_phase
          action: keep
      - job_name: 'gpu-metrics'
        static_configs:
        - targets: ['union-operator-dcgm-exporter.union.svc.cluster.local:9400']
      - job_name: kubernetes-cadvisor
        metrics_path: /metrics
        scheme: https
        kubernetes_sd_configs:
        - api_server: null
          role: node
          namespaces:
            names: []
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: false
        metric_relabel_configs:
        - separator: ;
          source_labels: [__name__]
          regex: container_cpu_usage_seconds_total|container_memory_working_set_bytes
          action: keep
        relabel_configs:
        - separator: ;
          regex: __meta_kubernetes_node_label_(.+)
          replacement: $1
          action: labelmap
        - separator: ;
          regex: (.*)
          target_label: __address__
          replacement: kubernetes.default.svc:443
          action: replace
        - source_labels: [__meta_kubernetes_node_name]
          separator: ;
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
          action: replace
      - job_name: 'opencost'
        honor_labels: true
        scrape_interval: 1m
        static_configs:
        - targets: ['opencost.union.svc.cluster.local:9003']
        metric_relabel_configs:
        - separator: ;
          source_labels: [__name__]
          regex: container_.*|.*_labels|.*_cost
          action: keep
---
# Source: union-operator/charts/union/templates/propeller/crds/flyteworkflow.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: flyteworkflows.flyte.lyft.com
spec:
  group: flyte.lyft.com
  names:
    kind: FlyteWorkflow
    plural: flyteworkflows
    shortNames:
      - fly
    singular: flyteworkflow
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          x-kubernetes-preserve-unknown-fields: true
          properties:
---
# Source: union-operator/charts/opencost/templates/clusterrole.yaml
# Cluster role giving opencost to get, list, watch required resources
# No write permissions are required
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: opencost-1.12.0
    app.kubernetes.io/name: opencost
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "1.102.0"
    app.kubernetes.io/part-of: opencost
    app.kubernetes.io/managed-by: Helm
  name: opencost
  namespace: union
rules:
  - apiGroups: [""]
    resources:
      - configmaps
      - deployments
      - nodes
      - pods
      - services
      - resourcequotas
      - replicationcontrollers
      - limitranges
      - persistentvolumeclaims
      - persistentvolumes
      - namespaces
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - statefulsets
      - deployments
      - daemonsets
      - replicasets
    verbs:
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
    verbs:
      - get
      - list
      - watch
---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.6.0
    app.kubernetes.io/managed-by: Helm
rules:
# Allow RO access to PODS
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
# Allow Event recording access
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - delete
  - patch
# Allow Access All plugin objects
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
# Allow Access to CRD
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
# Allow Access to all resources under flyte.lyft.com
- apiGroups:
  - flyte.lyft.com
  resources:
  - flyteworkflows
  - flyteworkflows/finalizers
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
  - post
  - deletecollection
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a ClusterRole for the webhook
# https://kubernetes.io/docs/admin/authorization/rbac/
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: union-flyte-pod-webhook
  namespace: union
rules:
  - apiGroups:
      - "*"
    resources:
      - mutatingwebhookconfigurations
      - secrets
      - pods
      - replicasets/finalizers
    verbs:
      - get
      - create
      - update
      - patch
---
# Source: union-operator/templates/cluster-resource-sync.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustersync-resource
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
      - rbac.authorization.k8s.io
    resources:
      - configmaps
      - namespaces
      - pods
      - resourcequotas
      - roles
      - rolebindings
      - secrets
      - services
      - serviceaccounts
    verbs:
      - '*'
---
# Source: union-operator/templates/monitoring/kube-state-metrics/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-operator-kube-state-metrics
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
---
# Source: union-operator/templates/monitoring/prometheus/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-operator-prometheus
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-prometheus
    app.kubernetes.io/instance: union-operator-prometheus
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - '*'
    resources:
      - nodes
      - nodes/proxy
    verbs:
      - get
      - list
      - watch
---
# Source: union-operator/templates/serviceaccount-logproxy.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - '*'
    resources:
      - "pods/log"
    verbs:
      - get
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::479331373192:role/opencompute-staging-sample-tenant-adminflyterole
rules:
  # Allow Access to all resources under flyte.lyft.com
  - apiGroups:
      - flyte.lyft.com
    resources:
      - flyteworkflows
      - flyteworkflows/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
      - patch
      - post
      - deletecollection
  - apiGroups:
      - '*'
    resources:
      - resourcequotas
      - pods
      - configmaps
      - podtemplates
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
---
# Source: union-operator/charts/opencost/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: opencost-1.12.0
    app.kubernetes.io/name: opencost
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "1.102.0"
    app.kubernetes.io/part-of: opencost
    app.kubernetes.io/managed-by: Helm
  name: opencost
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: opencost
subjects:
  - kind: ServiceAccount
    name: opencost
    namespace: union
---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.6.0
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-flytepropeller
subjects:
- kind: ServiceAccount
  name: flytepropeller
  namespace: union
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a binding from Role -> ServiceAccount
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: union-flyte-pod-webhook
  namespace: union
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-flyte-pod-webhook
subjects:
  - kind: ServiceAccount
    name: flyte-pod-webhook
    namespace: union
---
# Source: union-operator/templates/cluster-resource-sync.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustersync-resource
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustersync-resource
subjects:
  - kind: ServiceAccount
    name: clustersync-resource
    namespace: union
---
# Source: union-operator/templates/monitoring/kube-state-metrics/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-operator-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-operator-kube-state-metrics
subjects:
  - kind: ServiceAccount
    name: union-operator-kube-state-metrics
    namespace: union
---
# Source: union-operator/templates/monitoring/prometheus/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-operator-prometheus
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-prometheus
    app.kubernetes.io/instance: union-operator-prometheus
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-operator-prometheus
subjects:
  - kind: ServiceAccount
    name: union-operator-prometheus
    namespace: union
---
# Source: union-operator/templates/serviceaccount-logproxy.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-operator-proxy
subjects:
  - kind: ServiceAccount
    name: union-operator-proxy
    namespace: union
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::479331373192:role/opencompute-staging-sample-tenant-adminflyterole
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-operator
subjects:
  - kind: ServiceAccount
    name: union-operator
    namespace: union
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::479331373192:role/opencompute-staging-sample-tenant-adminflyterole
rules:
  - apiGroups:
      - '*'
    resources:
      - secrets
      - deployments
    verbs:
      - get
      - list
      - watch
      - create
      - update
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::479331373192:role/opencompute-staging-sample-tenant-adminflyterole
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: union-operator
subjects:
  - kind: ServiceAccount
    name: union-operator
    namespace: union
---
# Source: union-operator/charts/opencost/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: opencost-1.12.0
    app.kubernetes.io/name: opencost
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "1.102.0"
    app.kubernetes.io/part-of: opencost
    app.kubernetes.io/managed-by: Helm
  name: opencost
  namespace: union
spec:
  selector:
    app.kubernetes.io/name: opencost
    app.kubernetes.io/instance: union-operator
  type: ClusterIP
  ports:
    - name: http
      port: 9003
      targetPort: 9003
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Service
apiVersion: v1
kind: Service
metadata:
  name: flyte-pod-webhook
  namespace: union
  annotations: 
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  selector:
    app: flyte-pod-webhook
  ports:
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9443
---
# Source: union-operator/templates/monitoring/dcgm-exporter/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: union-operator-dcgm-exporter
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-dcgm-exporter
    app.kubernetes.io/instance: union-operator-dcgm-exporter
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "dcgm-exporter"
spec:
  type: ClusterIP
  ports:
    - port: 9400
      targetPort:  9400
      protocol: TCP
      name: "metrics"
  selector:
    app.kubernetes.io/name: union-operator-dcgm-exporter
    app.kubernetes.io/instance: union-operator-dcgm-exporter
---
# Source: union-operator/templates/monitoring/kube-state-metrics/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: union-operator-kube-state-metrics
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-kube-state-metrics
    app.kubernetes.io/instance: union-operator-kube-state-metrics
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort:  8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: union-operator-kube-state-metrics
    app.kubernetes.io/instance: union-operator-kube-state-metrics
---
# Source: union-operator/templates/monitoring/prometheus/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: union-operator-prometheus
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-prometheus
    app.kubernetes.io/instance: union-operator-prometheus
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort:  9090
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: union-operator-prometheus
    app.kubernetes.io/instance: union-operator-prometheus
---
# Source: union-operator/templates/service-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-proxy
    app.kubernetes.io/instance: union-operator-proxy
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v0.0.1"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 10254
      targetPort: debug
      protocol: TCP
      name: debug
  selector:
    app.kubernetes.io/name: union-operator-proxy
    app.kubernetes.io/instance: union-operator-proxy
---
# Source: union-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: debug
      protocol: TCP
      name: debug
  selector:
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
---
# Source: union-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flytepropeller
spec:
  ports:
    - port: 10254
  selector:
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
---
# Source: union-operator/templates/monitoring/dcgm-exporter/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: union-operator-dcgm-exporter
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-dcgm-exporter
    app.kubernetes.io/instance: union-operator-dcgm-exporter
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "dcgm-exporter"
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: union-operator-dcgm-exporter
      app.kubernetes.io/instance: union-operator-dcgm-exporter
      app.kubernetes.io/component: "dcgm-exporter"
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: union-operator-dcgm-exporter
        app.kubernetes.io/instance: union-operator-dcgm-exporter
        app.kubernetes.io/component: "dcgm-exporter"
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: union-operator-dcgm-exporter
      securityContext:
        {}
      volumes:
        - name: "pod-gpu-resources"
          hostPath:
            path: /var/lib/kubelet/pod-resources
      containers:
        - name: exporter
          image: "nvcr.io/nvidia/k8s/dcgm-exporter:3.1.7-3.1.4-ubuntu20.04"
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              add:
              - SYS_ADMIN
            runAsNonRoot: false
            runAsUser: 0
          args:
          - -f
          - /etc/dcgm-exporter/dcp-metrics-included.csv
          env:
            - name: "DCGM_EXPORTER_KUBERNETES"
              value: "true"
            - name: "DCGM_EXPORTER_LISTEN"
              value: ":9400"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - name: "metrics"
              containerPort: 9400
          volumeMounts:
            - name: "pod-gpu-resources"
              readOnly: true
              mountPath: "/var/lib/kubelet/pod-resources"
          livenessProbe:
            httpGet:
              path: /health
              port: 9400
            initialDelaySeconds: 45
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 9400
            initialDelaySeconds: 45
          resources:
            limits:
              cpu: 100m
              ephemeral-storage: 500Mi
              memory: 400Mi
            requests:
              cpu: 100m
              ephemeral-storage: 500Mi
              memory: 128Mi
      nodeSelector:
        ami_type: AL2_x86_64_GPU
      tolerations:
        - effect: NoSchedule
          key: nvidia.com/gpu
          operator: Exists
        - effect: NoSchedule
          key: flyte.org/node-role
          operator: Exists
---
# Source: union-operator/charts/opencost/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: opencost-1.12.0
    app.kubernetes.io/name: opencost
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "1.102.0"
    app.kubernetes.io/part-of: opencost
    app.kubernetes.io/managed-by: Helm
  name: opencost
  namespace: union
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: opencost
      app.kubernetes.io/instance: union-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: opencost
        app.kubernetes.io/instance: union-operator
    spec:
      securityContext:
        {}
      serviceAccountName: opencost
      tolerations:
        []
      containers:
        - image: "quay.io/kubecost1/kubecost-cost-model:prod-1.102.0"
          name: opencost
          resources:
            limits:
              cpu: 999m
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 55Mi
          readinessProbe:
            httpGet:
              path: /healthz
              port: 9003
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 200
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9003
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 10
          ports:
            - containerPort: 9003
              name: http
          securityContext:
            {}
          env:
            - name: PROMETHEUS_SERVER_ENDPOINT
              value: "http://union-operator-prometheus.sample-tenant.svc:80/prometheus"
            - name: CLUSTER_ID
              value: "default-cluster"
            # If username, password or bearer_token are defined, pull from secrets
            # Add any additional provided variables
          imagePullPolicy: Always
---
# Source: union-operator/charts/union/templates/clusterresourcesync/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: syncresources
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteclusterresourcesync
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.6.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteclusterresourcesync
      app.kubernetes.io/instance: union-operator
  template:
    metadata:
      annotations:
        configChecksum: "c6af9a305f3db76e0bd5fe88bd6a280f36974d0d48dde22f2cd476c77b6ddc0"
      labels: 
        app.kubernetes.io/name: flyteclusterresourcesync
        app.kubernetes.io/instance: union-operator
        helm.sh/chart: union-v1.6.0
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - command:
            - flyteadmin
            - --config
            - /etc/flyte/config/*.yaml
            - clusterresource
            - run
          image: "cr.flyte.org/flyteorg/flyteadmin-release:v1.6.0"
          imagePullPolicy: "IfNotPresent"
          name: sync-cluster-resources
          volumeMounts:
          - name: auth
            mountPath: /etc/secrets/
          - mountPath: /etc/flyte/clusterresource/templates
            name: resource-templates
          - mountPath: /etc/flyte/config
            name: config-volume
      serviceAccountName: clustersync-resource
      volumes:
        
        - configMap:
            name: clusterresource-template
          name: resource-templates
        - configMap:
            name: flyte-clusterresourcesync-config
          name: config-volume
        - name: auth
          secret:
            secretName: flyte-secret-auth
---
# Source: union-operator/charts/union/templates/propeller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: union
  name: flytepropeller-manager
  labels: 
    app.kubernetes.io/name: flytepropeller-manager
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v1.6.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flytepropeller-manager
      app.kubernetes.io/instance: union-operator
  template:
    metadata:
      annotations:
        configChecksum: "1ad8411151b110dd8381ec2f2b660a3b8ca5a37667b0e70beebd55583265ece"
      labels: 
        app.kubernetes.io/name: flytepropeller-manager
        app.kubernetes.io/instance: union-operator
        helm.sh/chart: union-v1.6.0
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      containers:
      - command:
        - flytepropeller-manager
        - --manager.pod-template-namespace
        - union
        - --config
        - /etc/flyte/config/*.yaml
        - --propeller.cluster-id
        - 'clustername'
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.6.0"
        imagePullPolicy: "IfNotPresent"
        name: flytepropeller-manager
        ports:
        - containerPort: 10254
        resources:
          limits:
            cpu: "4"
            ephemeral-storage: 500Mi
            memory: 8Gi
          requests:
            cpu: "1"
            ephemeral-storage: 100Mi
            memory: 500Mi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/flyte/config
        - name: auth
          mountPath: /etc/secrets/
        terminationMessagePolicy: "FallbackToLogsOnError"
      serviceAccountName: flytepropeller
      volumes:
      - configMap:
          name: flyte-propeller-config
        name: config-volume
      - name: auth
        secret:
          secretName: flyte-secret-auth
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create the actual deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyte-pod-webhook
  namespace: union
  labels:
    app: flyte-pod-webhook
spec:
  selector:
    matchLabels:
      app: flyte-pod-webhook
  template:
    metadata:
      labels:
        app: flyte-pod-webhook
        app.kubernetes.io/name: flyte-pod-webhook
        app.kubernetes.io/version: v1.6.0
      annotations:
        configChecksum: "1ad8411151b110dd8381ec2f2b660a3b8ca5a37667b0e70beebd55583265ece"
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      serviceAccountName: flyte-pod-webhook
      initContainers:
      - name: generate-secrets
        image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.6.0"
        imagePullPolicy: "IfNotPresent"
        command:
          - flytepropeller
        args:
          - webhook
          - init-certs
          - --config
          - /etc/flyte/config/*.yaml
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        volumeMounts:
          - name: config-volume
            mountPath: /etc/flyte/config
      containers:
        - name: webhook
          image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.6.0"
          imagePullPolicy: "IfNotPresent"
          command:
            - flytepropeller
          args:
            - webhook
            - --config
            - /etc/flyte/config/*.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: config-volume
              mountPath: /etc/flyte/config
              readOnly: true
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: flyte-propeller-config
        - name: webhook-certs
          secret:
            secretName: flyte-pod-webhook
---
# Source: union-operator/templates/deployment-proxy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-proxy
    app.kubernetes.io/instance: union-operator-proxy
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v0.0.1"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: union-operator-proxy
      app.kubernetes.io/instance: union-operator-proxy
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: union-operator-proxy
        app.kubernetes.io/instance: union-operator-proxy
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: union-operator
      priorityClassName: system-cluster-critical
      serviceAccountName: union-operator-proxy
      securityContext:
        {}
      containers:
        - name: union-operator-proxy
          securityContext:
            {}
          image: "public.ecr.aws/p0i0a9q8/unionoperator:458f9abd0b2dd2277059dc88709f4e251679918b"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: "4"
              ephemeral-storage: 500Mi
              memory: 8Gi
            requests:
              cpu: "1"
              ephemeral-storage: 100Mi
              memory: 500Mi
          volumeMounts:
            - mountPath: /etc/union/config
              name: config-volume
          args:
            - operator
            - proxy
            - --config
            - /etc/union/config/*.yaml
          ports:
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
---
# Source: union-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: union-operator
      app.kubernetes.io/instance: union-operator
  template:
    metadata:
      annotations:
        configChecksum: "2416fefd8fd5b88733cade184333b5bb4fbe6556b6b078b251947831cf00bdc"
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: union-operator
        app.kubernetes.io/instance: union-operator
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: union-operator
      securityContext:
        {}
      volumes:
        - name: config-volume
          configMap:
            name: union-operator
        - name: secret-volume
          secret:
            secretName: union-operator
      containers:
        - name: union-operator
          securityContext:
            {}
          image: "public.ecr.aws/p0i0a9q8/unionoperator:458f9abd0b2dd2277059dc88709f4e251679918b"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: "4"
              ephemeral-storage: 500Mi
              memory: 8Gi
            requests:
              cpu: "1"
              ephemeral-storage: 100Mi
              memory: 500Mi
          volumeMounts:
            - mountPath: /etc/union/config
              name: config-volume
            - mountPath: /etc/union/secret
              name: secret-volume
          env:
            - name: CLUSTER_NAME
              valueFrom:
                secretKeyRef:
                  name: union-operator-cluster-name
                  key: cluster_name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DEPLOYMENT_NAME
              value: union-operator
          args:
            - operator
            - serve
            - --config
            - /etc/union/config/*.yaml
            - --operator.clusterId.name
            - "$(CLUSTER_NAME)"
            - --operator.tunnel.k8sSecretName
            - union-operator
          ports:
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
        - name: "tunnel"
          securityContext:
            {}
          image: cloudflare/cloudflared:2022.6.3
          imagePullPolicy: IfNotPresent
          args:
            - tunnel
            - --no-autoupdate
            - run
            - --token
            - $(TUNNEL_TOKEN)
          env:
            - name: TUNNEL_TOKEN
              valueFrom:
                secretKeyRef:
                  name: union-operator
                  key: tunnel_token
                  optional: false
---
# Source: union-operator/templates/monitoring/kube-state-metrics/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: union-operator-kube-state-metrics
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-kube-state-metrics
    app.kubernetes.io/instance: union-operator-kube-state-metrics
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: union-operator-kube-state-metrics
      app.kubernetes.io/instance: union-operator-kube-state-metrics
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: union-operator-kube-state-metrics
        app.kubernetes.io/instance: union-operator-kube-state-metrics
    spec:
      priorityClassName: 
      serviceAccountName: union-operator-kube-state-metrics
      securityContext:
        {}
      containers:
        - args:
            - --port=8080
            - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,leases,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: union-operator
          image: "registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.8.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: "4"
              ephemeral-storage: 500Mi
              memory: 8Gi
            requests:
              cpu: "1"
              ephemeral-storage: 100Mi
              memory: 500Mi
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
---
# Source: union-operator/templates/monitoring/prometheus/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: union-operator-prometheus
  labels:
    helm.sh/chart: union-operator-v0.0.1
    app.kubernetes.io/name: union-operator-prometheus
    app.kubernetes.io/instance: union-operator-prometheus
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: union-operator-prometheus
      app.kubernetes.io/instance: union-operator-prometheus
  template:
    metadata:
      annotations:
        configChecksum: "1d2d3349af192568f0f868ab473f227e1507ea444a4313905f81b1f62d5612c"
      labels:
        app.kubernetes.io/name: union-operator-prometheus
        app.kubernetes.io/instance: union-operator-prometheus
    spec:
      priorityClassName: 
      serviceAccountName: union-operator-prometheus
      securityContext:
            fsGroup: 2000
            fsGroupChangePolicy: OnRootMismatch
            runAsNonRoot: true
            runAsUser: 1000
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: 'union-operator-prometheus'
      containers:
        - args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --web.external-url=/prometheus/
            - --web.route-prefix=/prometheus/
            - --storage.tsdb.retention.size=400MB
          image: "prom/prometheus:v2.43.0"
          imagePullPolicy: IfNotPresent
          name: union-operator
          securityContext:
            allowPrivilegeEscalation: false
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: "4"
              ephemeral-storage: 1Gi
              memory: 8Gi
            requests:
              cpu: "1"
              ephemeral-storage: 500Mi
              memory: 500Mi
          volumeMounts:
            - mountPath: /etc/prometheus
              name: prometheus-config-volume
          ports:
            - name: http
              containerPort: 18080
              protocol: TCP
---
# Source: union-operator/charts/union/templates/propeller/manager.yaml
apiVersion: v1
kind: PodTemplate
metadata:
  name: flytepropeller-template
  namespace: union
template:
  metadata:
    annotations:
      configChecksum: "1ad8411151b110dd8381ec2f2b660a3b8ca5a37667b0e70beebd55583265ece"
    labels: 
      app.kubernetes.io/name: flytepropeller
      app.kubernetes.io/instance: union-operator
      helm.sh/chart: union-v1.6.0
      app.kubernetes.io/managed-by: Helm
      app: flytepropeller
  spec:
    securityContext:
      fsGroup: 65534
      runAsUser: 1001
      fsGroupChangePolicy: "Always"
    containers:
    - command:
      - flytepropeller
      - --config
      - /etc/flyte/config/*.yaml
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.6.0"
      imagePullPolicy: "IfNotPresent"
      name: flytepropeller
      ports:
      - containerPort: 10254
      resources: 
        limits:
          cpu: "4"
          ephemeral-storage: 500Mi
          memory: 8Gi
        requests:
          cpu: "1"
          ephemeral-storage: 100Mi
          memory: 500Mi
      volumeMounts:
        - name: config-volume
          mountPath: /etc/flyte/config
        - name: auth
          mountPath: /etc/secrets/
      terminationMessagePolicy: "FallbackToLogsOnError"
    serviceAccountName: flytepropeller
    volumes:
    - configMap:
        name: flyte-propeller-config
      name: config-volume
    - name: auth
      secret:
        secretName: flyte-secret-auth
