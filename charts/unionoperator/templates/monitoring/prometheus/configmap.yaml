{{- if .Values.union.unionoperatorMonitoring.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "union-operator.fullname" . }}-prometheus
  labels:
    {{- include "unionoperatorMonitoring.prometheus.labels" . | nindent 4 }}
data:
  prometheus.yml: |
    global:
      scrape_interval:     15s
      evaluation_interval: 15s
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
    rule_files:
      - rules.yml
    scrape_configs:
      - job_name: 'prometheus'
        metrics_path: /prometheus/metrics
        static_configs:
        - targets: ['localhost:9090']
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: prometheus_tsdb_head_chunks_storage_size_bytes|prometheus_tsdb_head_series|prometheus_tsdb_head_series_created_total|prometheus_tsdb_head_series_removed_total|prometheus_tsdb_head_samples_appended_total|prometheus_tsdb_storage_blocks_bytes|prometheus_tsdb_retention_limit_bytes|prometheus_tsdb_wal_storage_size_bytes|.+_(limit|failed|missed|failures)_total
          action: keep
      - job_name: 'karpenter'
        scrape_interval: 30s
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - karpenter
              - kube-system
        relabel_configs:
        - source_labels:
          - __meta_kubernetes_service_name
          - __meta_kubernetes_endpoint_port_name
          action: keep
          regex: karpenter;(http-metrics|webhook-metrics)
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_service_name
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          target_label: endpoint_port
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: 'karpenter_cloudprovider_errors_total'
          action: keep
      - job_name: 'kube-state-metrics'
        static_configs:
        - targets: ['kube-state-metrics.kube-system.svc.cluster.local:{{ .Values.union.unionoperatorMonitoring.kubeStateMetrics.service.port }}']
        metric_relabel_configs:
        - separator: ;
          source_labels: [__name__]
          regex: kube_pod_container_resource_(limits|requests)|kube_pod_status_phase|kube_node_(labels|status_allocatable|status_condition)|kube_namespace_labels|kube_pod_container_status_(waiting|terminated|last_terminated).*_reason|kube_daemonset_status_number_unavailable|kube_deployment_status_replicas_unavailable|kube_resourcequota|kube_pod_info|kube_node_info|kube_pod_container_status_restarts_total
          action: keep
        - separator: ;
          source_labels: [__name__, phase]
          regex: kube_pod_status_phase;(Succeeded|Failed)
          action: drop
        # Replace insert nodename to assist Grafana joins
        - source_labels: [node]
          target_label: nodename
          regex: '(.*)'  # copy the value as is
          action: replace
        # Ensure all cloud provider group names populate label_node_pool_name
        - source_labels: [label_node_group_name]
          action: replace
          # Assume GCP environments don't have label_node_group_name
          regex: (.+)
          target_label: label_node_pool_name
        {{- with .Values.union.unionoperatorMonitoring.scrapeConfigs.kubeStateMetrics.extraMetricRelabelConfigs }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      - job_name: 'gpu-metrics'
        static_configs:
        - targets: ['dcgm-exporter.kube-system.svc.cluster.local:{{ .Values.union.unionoperatorMonitoring.dcgmExporter.service.port }}']
      - job_name: union-mountpoint
        metrics_path: /metrics
        scheme: http
        kubernetes_sd_configs:
          - role: node
            namespaces:
             names: []
        relabel_configs:
          - source_labels: [__address__]
            action: replace
            regex: ([^:]+):.*
            replacement: $1:9000
            target_label: __address__
      # cAdvisor metrics shared between Task resource monitoring and operational monitoring
      - job_name: kubernetes-cadvisor
        metrics_path: /metrics
        scheme: https
        kubernetes_sd_configs:
        - api_server: null
          role: node
          namespaces:
            names: []
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: false
        metric_relabel_configs:
        - separator: ;
          source_labels: [__name__]
          regex: {{ .Values.union.unionoperatorMonitoring.prometheus.cadvisor.metricsNameRegex.default }}
          action: keep
        {{- with .Values.union.unionoperatorMonitoring.prometheus.cadvisor.additional_metric_relabel_configs }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        relabel_configs:
        - separator: ;
          regex: __meta_kubernetes_node_label_(.+)
          replacement: $1
          action: labelmap
        - separator: ;
          regex: (.*)
          target_label: __address__
          replacement: kubernetes.default.svc:443
          action: replace
        - source_labels: [__meta_kubernetes_node_name]
          separator: ;
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
          action: replace
      # cAdvisor metrics for operational monitoring but not intended to be used with Task resource monitoring
      - job_name: kubernetes-cadvisor-extended
        metrics_path: /metrics
        scheme: https
        kubernetes_sd_configs:
        - api_server: null
          role: node
          namespaces:
            names: []
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: false
        metric_relabel_configs:
        - separator: ;
          source_labels: [namespace, __name__]
          regex: ({{ include "union-operator.namespace" . }}|kube-system|karpenter);{{ .Values.union.unionoperatorMonitoring.prometheus.cadvisor.metricsNameRegex.extended }}
          action: keep
        {{- with .Values.union.unionoperatorMonitoring.prometheus.cadvisor.additional_metric_relabel_configs }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        relabel_configs:
        - separator: ;
          regex: __meta_kubernetes_node_label_(.+)
          replacement: $1
          action: labelmap
        - separator: ;
          regex: (.*)
          target_label: __address__
          replacement: kubernetes.default.svc:443
          action: replace
        - source_labels: [__meta_kubernetes_node_name]
          separator: ;
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
          action: replace
      {{- if .Values.union.unionoperatorMonitoring.flytePropeller.enabled }}
      # Some customers rely on propeller metrics for monitoring. Be mindful of non-additive changes.
      - job_name: 'flyte-propeller'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - "{{ include "union-operator.namespace" . }}"
          selectors:
          - role: "pod"
            label: "app.kubernetes.io/name=flytepropeller"
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: "\
            flyte:propeller:all:(main|sub)_(adds|depth)|\
            flyte:propeller:all:(workflow|node|task):event_recording:(success|failure)_duration_ms_count|\
            flyte:propeller:all:admin_launcher:cache_item_syncs|\
            flyte:propeller:all:admin_launcher:watch_api_.*|\
            flyte:propeller:all:discovery_.*|\
            flyte:propeller:all:execstats:active_.*|\
            flyte:propeller:all:free_workers_count|\
            flyte:propeller:all:gc_.*|\
            flyte:propeller:all:metastore:cache_hit|\
            flyte:propeller:all:metastore:cache_miss|\
            flyte:propeller:all:metastore:write_ms|\
            flyte:propeller:all:node:accelerated_input_count|\
            flyte:propeller:all:node:container:container:task_pod_errors|\
            flyte:propeller:all:node:fast_task:.*|\
            flyte:propeller:all:node:node_exec_latency_us|\
            flyte:propeller:all:node:perma_system_error_duration_ms_count|\
            flyte:propeller:all:node:perma_user_error_duration_ms_count|\
            flyte:propeller:all:node:queueing_latency_ms|\
            flyte:propeller:all:node:system_error_duration_ms_count|\
            flyte:propeller:all:node:transition_latency_ms|\
            flyte:propeller:all:node:user_error_duration_ms_count|\
            flyte:propeller:all:plugin.*|\
            flyte:propeller:all:reservation_.*|\
            flyte:propeller:all:round:.*_error|\
            flyte:propeller:all:round:round_time_ms|\
            flyte:propeller:all:wf_update.*|\
            grpc_client_.*|\
            k8s_client_.*|\
            go_.*|\
            process_.*"
          action: keep
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
        # Add namespace as a label
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: namespace
        # Add pod name as a label
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: pod
        # Add container name as a label
        - source_labels: [__meta_kubernetes_pod_container_name]
          action: replace
          target_label: container
      {{- end }}
      {{- if and (.Values.union.unionoperatorMonitoring.opencost.enabled) (.Values.union.unionoperatorMonitoring.opencost.scrape) }}
      {{- if .Values.union.unionoperatorMonitoring.opencost.alpha }}
      - job_name: 'opencost'
        honor_labels: true
        scrape_interval: 1m
        static_configs:
          - targets: ['opencost.{{ include "union-operator.namespace" . }}.svc.cluster.local:9003']
        metric_relabel_configs:
          - separator: ;
            source_labels: [__name__]
            regex: kube_node_labels|kube_pod_labels|node_total_hourly_cost|node_ram_hourly_cost|node_cpu_hourly_cost|node_gpu_hourly_cost|pv_hourly_cost|container_memory_allocation_bytes|container_cpu_allocation|container_gpu_allocation|pod_pvc_allocation
            action: keep
      {{ else }}
      - job_name: 'opencost'
        honor_labels: true
        scrape_interval: 1m
        static_configs:
        - targets: ['opencost.{{ include "union-operator.namespace" . }}.svc.cluster.local:9003']
        metric_relabel_configs:
        - separator: ;
          source_labels: [__name__]
          regex: container_.*|.*_labels|.*_cost|pod_pvc_allocation
          action: keep
        - separator: ;
          source_labels: [__name__]
          regex: kube_namespace_labels
          action: drop
      {{- end }}
      {{- end }}
      {{- if .Values.flyteagent.enabled }}
      - job_name: 'flyteagent'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
              - "{{ include "union-operator.namespace" . }}"
          selectors:
            - role: "pod"
              label: "app.kubernetes.io/name=flyteagent"
        metric_relabel_configs:
        - source_labels: [ task_type ]
          regex: 'airflow|bigquery_query_job_task|sleep|sensor'
          action: keep
      {{- end}}
      {{- with .Values.union.unionoperatorMonitoring.extraScrapeConfigs }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      - job_name: 'fluentbit'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - "{{ .Values.union.unionoperatorMonitoring.fluentbit.namespace }}"
          selectors:
          - role: "pod"
            label: "{{ .Values.union.unionoperatorMonitoring.fluentbit.kubernetesLabel }}"
        relabel_configs:
        - source_labels: [__metrics_path__]
          target_label: __metrics_path__
          replacement: /api/v1/metrics/prometheus
        - source_labels: [__address__]
          target_label: __address__
          action: replace
          regex: ([^:]+)(?::\d+)?
          replacement: $1:2020
        - source_labels: [__address__]
          regex: '(.*):\d+'
          target_label: instance
          replacement: '$1'
        - regex: pod
          action: labeldrop
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: "fluentbit_input_bytes_total|\
            fluentbit_output_proc_records_total|\
            fluentbit_output_dropped_records_total|\
            fluentbit_output_proc_bytes_total"
          action: keep
      - job_name: 'node-exporter'
        scrape_interval: 60s
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - "kube-system"
          selectors:
          - role: "pod"
            label: "app.kubernetes.io/name=prometheus-node-exporter"
        relabel_configs:
        - source_labels: [__address__]
          target_label: __address__
          action: replace
          regex: ([^:]+)(?::\d+)?
          replacement: $1:9100
        - source_labels: [__address__]
          regex: '(.*):\d+'
          target_label: instance
          replacement: '$1'
        - regex: pod
          action: labeldrop
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: 'node_cpu_guest_seconds_total|node_filesystem_files|node_filesystem_files_free|node_filesystem_readonly|node_filesystem_free_bytes'
          action: drop
        - source_labels: [__name__]
          regex: 'node_network_(a|c|d|f|i|m|n|p|s|u).*|node_network_receive_(c|d|f|m|n|q).*|node_network_transmit_(c|d|f|m|n|q).*'
          action: drop
        - source_labels: [__name__]
          regex: 'node_nf_conntrack_stat.*'
          action: drop
        - source_labels: [__name__, mountpoint]
          separator: ;
          regex: 'node_filesystem_[^;]+;(?:(/data/union-persistent)|.*)'
          action: replace
          replacement: '$1'
          target_label: mountpoint
      - job_name: 'coredns'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - "kube-system"
          selectors:
          - role: "pod"
            label: "eks.amazonaws.com/component=coredns"
        relabel_configs:
        - source_labels: [__address__]
          target_label: __address__
          action: replace
          regex: ([^:]+)(?::\d+)?
          replacement: $1:9153
        - source_labels: [__address__]
          regex: '(.*):\d+'
          target_label: instance
          replacement: '$1'
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: "coredns_panics_total|\
            coredns_dns_requests_total|\
            coredns_dns_request_duration_seconds.*|\
            coredns_dns_responses_total|\
            coredns_forward_.*"
          action: keep
      # CoreDNS forward proxy specific metrics
      #   Filters for "forward" in the proxy_name label
      - job_name: 'coredns-forward-proxy'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - "kube-system"
          selectors:
          - role: "pod"
            label: "eks.amazonaws.com/component=coredns"
        relabel_configs:
        - source_labels: [__address__]
          target_label: __address__
          action: replace
          regex: ([^:]+)(?::\d+)?
          replacement: $1:9153
        - source_labels: [__address__]
          regex: '(.*):\d+'
          target_label: instance
          replacement: '$1'
        metric_relabel_configs:
        - source_labels: [__name__, proxy_name]
          separator: ;
          regex: 'coredns_proxy_(.*)|forward'
          action: keep
      - job_name: 'kubernetes-apiservers'
        scrape_interval: 30s
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: false
        relabel_configs:
        - source_labels:
          - __meta_kubernetes_namespace
          - __meta_kubernetes_service_name
          - __meta_kubernetes_endpoint_port_name
          action: keep
          regex: default;kubernetes;https
        metric_relabel_configs:
        - action: replace
          source_labels: [resource]
          target_label: 'resource'
          replacement: 'union_cloud_replacement'
          regex: 'workqueue_.*'
        - action: keep
          regex: (apiserver_request_.*|apiserver_response_.*|apiserver_storage_objects|workqueue_.*);(flyteworkflows\.flyte\.lyft\.com|nodes|pods|union_cloud_replacement)
          source_labels:
          - __name__
          - resource
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - "{{ include "union-operator.namespace" . }}"
        relabel_configs:
        # Flytepropeller is scraped with "flyte-propeller" job
        - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
          regex: flytepropeller
          action: drop
        # Serving Envoy is scraped with "serving-envoy" job
        - source_labels: [__meta_kubernetes_pod_label_app]
          regex: 3scale-kourier-gateway
          action: drop
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        # Add namespace as a label
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: namespace
        # Add pod name as a label
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: pod
        # Add container name as a label
        - source_labels: [__meta_kubernetes_pod_container_name]
          action: replace
          target_label: container
        {{- with .Values.union.unionoperatorMonitoring.prometheus.kubernetesPods.additional_metric_relabel_configs }}
        metric_relabel_configs:
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- if index .Values "kueue-resources" "enabled" }}
      - job_name: 'kueue'
        scrape_interval: 30s
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - "kueue-system"
            selectors:
              - role: "pod"
                label: "control-plane=controller-manager"
        relabel_configs:
          - source_labels: [ __address__ ]
            regex: (.+):(\d+)
            target_label: __address__
            replacement: ${1}:8080
        metric_relabel_configs:
          - source_labels: [ __name__ ]
            regex: "\
              kueue_admission_attempt_duration_seconds_bucket|\
              kueue_admission_attempts_total|\
              kueue_admission_checks_wait_time_seconds|\
              kueue_admission_wait_time_seconds_bucket|\
              kueue_admitted_active_workloads|\
              kueue_admitted_workloads_total|\
              kueue_cluster_queue_status|\
              kueue_evicted_workloads_total|\
              kueue_pending_workloads|\
              kueue_quota_reserved_wait_time_seconds_bucket|\
              kueue_quota_reserved_workloads_total"
            action: keep
      {{- end }}
      {{- if and .Values.serving.enabled .Values.serving.metrics }}
      - job_name: 'serving-envoy'
        scrape_interval: 30s
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
              - "{{ include "union-operator.namespace" . }}"
            selectors:
            - role: "pod"
              label: "app=3scale-kourier-gateway"
        relabel_configs:
          - source_labels: [ __address__ ]
            regex: (.+):(\d+)
            target_label: __address__
            replacement: ${1}:9000
        metrics_path: /stats/prometheus
        metric_relabel_configs:
          - source_labels: [ __name__ ]
            regex: "^envoy_cluster_upstream_rq.*"
            action: keep
      {{- end }}
  rules.yml: |
    groups:
      - name: rollup
        rules:
        - record: instance_type:kube_node_labels:sum
          expr: sum by (label_cloud_google_com_gke_accelerator, label_cloud_google_com_gke_preemptible, label_eks_amazonaws_com_capacity_type, label_flyte_org_node_role, label_node_group_name, label_node_kubernetes_io_instance_type, label_node_pool_name, label_topology_kubernetes_io_region) (kube_node_labels{job="kube-state-metrics"})
        - record: deployment:kube_deployment_status_replicas_unavailable:sum
          expr: sum by (deployment,namespace) (kube_deployment_status_replicas_unavailable{})
        - record: daemonset:kube_daemonset_status_number_unavailable:sum
          expr: sum by(daemonset,namespace)(kube_daemonset_status_number_unavailable{})
        - record: phase:kube_pod_status_phase:sum
          expr: sum by (label_union_ai_namespace_type, phase) (kube_pod_status_phase{job="kube-state-metrics"} * on (namespace) group_left(label_union_ai_namespace_type) kube_namespace_labels)
        - record: namespace_phase:kube_pod_status_phase:sum
          expr: sum by (namespace, label_union_ai_namespace_type, phase) (kube_pod_status_phase{job="kube-state-metrics"} * on (namespace) group_left(label_union_ai_namespace_type) kube_namespace_labels)
        # Pods OOM killed over a 10 minute window
        - record: pod:oomkilled:5m_count
          expr: (kube_pod_container_status_restarts_total{namespace=~"{{ include "union-operator.namespace" . }}|kube-system"} - kube_pod_container_status_restarts_total offset 5m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[5m]) == 1
        - record: namespace_type:pod:container_cpu_usage_seconds_total:count
          expr: count by (label_union_ai_namespace_type) (count  by (namespace, label_union_ai_namespace_type, pod) (container_cpu_usage_seconds_total{pod!="", job=~"kubernetes-cadvisor.*", name!=""} * on (namespace) group_left(label_union_ai_namespace_type) kube_namespace_labels))
        - record: namespace:pod:container_cpu_usage_seconds_total:count
          expr: count by (namespace, label_union_ai_namespace_type) (count  by (namespace, label_union_ai_namespace_type, pod) (container_cpu_usage_seconds_total{pod!="", job=~"kubernetes-cadvisor.*", name!=""} * on (namespace) group_left(label_union_ai_namespace_type) kube_namespace_labels))
        - record: container:container_cpu_usage_seconds_total:rate_sum
          expr: sum(rate(container_cpu_usage_seconds_total{container!="", job=~"kubernetes-cadvisor.*", namespace=~"{{ include "union-operator.namespace" . }}|kube-system"}[5m])) by (namespace, pod, container)
        - record: container:container_memory_working_set_bytes:sum
          expr: sum by (namespace, pod, container) (container_memory_working_set_bytes{namespace=~"{{ include "union-operator.namespace" . }}|kube-system", image!="", job=~"kubernetes-cadvisor.*", name!=""})
        - record: container:container_spec_memory_limit_bytes:sum
          expr: sum by (namespace, pod, container) (container_spec_memory_limit_bytes{namespace=~"{{ include "union-operator.namespace" . }}|kube-system", image!="", job=~"kubernetes-cadvisor.*", name!=""})
        - record: container:cpu_utilization
          expr: (sum(rate(container_cpu_usage_seconds_total{container!="", job=~"kubernetes-cadvisor.*", namespace=~"{{ include "union-operator.namespace" . }}|kube-system"}[5m])) by (namespace, pod, container) / sum(container_spec_cpu_quota{container!=""}/container_spec_cpu_period{container!=""}) by (namespace, pod, container)) * on (namespace) group_left(label_union_ai_namespace_type) kube_namespace_labels
        - record: container:memory_utilization
          expr: (sum(container_memory_working_set_bytes{name!="", job=~"kubernetes-cadvisor.*", namespace=~"{{ include "union-operator.namespace" . }}|kube-system"}) BY (namespace, pod, container) / sum(container_spec_memory_limit_bytes{name!=""} > 0) BY (namespace, pod, container)) * on (namespace) group_left(label_union_ai_namespace_type) kube_namespace_labels
        - record: container:throttle_rate
          expr: sum by (container, pod, namespace) (increase(container_cpu_cfs_throttled_periods_total{container!="", job=~"kubernetes-cadvisor.*", namespace=~"{{ include "union-operator.namespace" . }}|kube-system"}[5m])) / sum by (container, pod, namespace)(increase(container_cpu_cfs_periods_total[5m])) * on (namespace) group_left(label_union_ai_namespace_type) kube_namespace_labels
        - record: job:up:sum
          expr: sum by (job) (up)
        - record: job:up:count
          expr: count by (job) (up)
        - record: flyte_agent_request_latency_seconds:mean1m
          expr: sum(rate(flyte_agent_request_latency_seconds_sum[1m])) / sum(rate(flyte_agent_request_latency_seconds_count[1m]))
        - record: name:time_series_cardinality:count
          expr: sum by (name)(label_replace(count by(__name__) ({__name__=~".+"}), "name", "$1", "__name__", "(.+)"))
        # Fluentbit Rules
        - record: fluentbit_input_bytes_total:sum
          expr: sum(fluentbit_input_bytes_total)
        - record: fluentbit_output_dropped_records_total:sum
          expr: sum(fluentbit_output_dropped_records_total)
        - record: fluentbit_output_proc_bytes_total:sum
          expr: sum(fluentbit_output_proc_bytes_total)
        - record: instance:fluentbit_output_proc_records_total:rate_sum
          expr: sum by(instance)(rate(fluentbit_output_proc_records_total[2m]))
        # Node-exporter rules
        # Copied from kube-prometheus-stack rules, can be remove and switch the Prometheus Operator CRD managed rules
        # Reference: https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/templates/prometheus/rules-1.14/node-exporter.rules.yaml#L67
        - record: instance:node_num_cpu:sum
          expr: |-
            count without (cpu, mode) (
              node_cpu_seconds_total{job="node-exporter",mode="idle"}
            )
        - record: instance:node_cpu_utilisation:rate5m
          expr: |-
            1 - avg without (cpu) (
              sum without (mode) (rate(node_cpu_seconds_total{job="node-exporter", mode=~"idle|iowait|steal"}[5m]))
            )
        - record: instance:node_load1_per_cpu:ratio
          expr: |-
            (
              node_load1{job="node-exporter"}
            /
              instance:node_num_cpu:sum{job="node-exporter"}
            )
        - record: instance:node_memory_utilisation:ratio
          expr: |-
            1 - (
              node_memory_MemAvailable_bytes{job="node-exporter"}
            /
              node_memory_MemTotal_bytes{job="node-exporter"}
            )
        - record: instance:node_vmstat_pgmajfault:rate5m
          expr: rate(node_vmstat_pgmajfault{job="node-exporter"}[5m])
        - record: k8s_client_request_total_unlabeled
          expr: sum(k8s_client_request_total) without (code, method)
        - record: k8s_client_request_latency_unlabeled_bucket
          expr: sum(k8s_client_request_latency_bucket) without (verb)
        - record: k8s_client_request_latency_unlabeled_count
          expr: sum(k8s_client_request_latency_count) without (verb)
        - record: k8s_client_request_latency_unlabeled_sum
          expr: sum(k8s_client_request_latency_sum) without (verb)
        - record: k8s_client_rate_limiter_latency_unlabeled_bucket
          expr: sum(k8s_client_rate_limiter_latency_bucket) without (verb)
        - record: k8s_client_rate_limiter_latency_unlabeled_count
          expr: sum(k8s_client_rate_limiter_latency_count) without (verb)
        - record: k8s_client_rate_limiter_latency_unlabeled_sum
          expr: sum(k8s_client_rate_limiter_latency_sum) without (verb)
        # Pre-compute node information to be easily utilized with Node exporter time series
        # Inject nodename, and selected Kubernertes Labels. Feel free to add more labels as needed.
        # Notes:
        # * filtering out -secondary node pool names to remove many to many join node_pool_name value change
        # * Default node groups (operator, etc) won't have certain labels including but not limited to label_flyte_org_node_role
        - record: node:common_labels
          expr: node_uname_info{nodename=~".+"} * on(nodename) group_left(label_node_pool_name, label_node_kubernetes_io_instance_type, label_flyte_org_node_role, label_union_ai_node_role) count by (nodename, label_node_pool_name, label_node_kubernetes_io_instance_type, label_flyte_org_node_role, label_union_ai_node_role)(kube_node_labels{label_node_pool_name!~".*-secondary", job="kube-state-metrics"})

        # Approximation of AWS ENI conntrack allowance
        - record: node_nf_conntrack_entry_utilization
          expr: node_nf_conntrack_entries / node_nf_conntrack_entries_limit

        # Node network
        # Cloud Providers like AWS create time series per ENI, this can
        # dramatically increase cardinality. AWS Network throughput is primarily
        # bottlenecked by instance tier limits.
        - record: instance:node_network_receive_bytes_total:sum
          expr: sum by (instance) (node_network_receive_bytes_total)
        - record: instance:node_network_transmit_bytes_total:sum
          expr: sum by (instance) (node_network_transmit_bytes_total)
        - record: instance:node_network_receive_errs_total:sum
          expr: sum by (instance) (node_network_receive_errs_total)
        - record: instance:node_network_transmit_errs_total:sum
          expr: sum by (instance) (node_network_transmit_errs_total)
        - record: instance:node_network_receive_packets_total:sum
          expr: sum by (instance) (node_network_receive_packets_total)
        - record: instance:node_network_transmit_packets_total:sum
          expr: sum by (instance) (node_network_transmit_packets_total)

        # Count active Flyte namespaces, useful for approximating active users in serverless environments
        - record: namespace:flyte:total
          expr: count(kube_namespace_labels{label_union_ai_namespace_type="flyte"})

        # Count the number of reasons why Pods are terminating or waiting.
        - record: node:namespace:kube_pod_container_status_last_terminated_reason:sum
          expr: sum by (node, namespace, reason)(kube_pod_container_status_last_terminated_reason * on(pod) group_left(node) (sum by (node, namespace, pod)(kube_pod_info{nodename!=""})))
        - record: node:namespace:kube_pod_container_status_terminated_reason:sum
          expr: sum by (node, namespace, reason)(kube_pod_container_status_terminated_reason * on(pod) group_left(node) (sum by (node, namespace, pod)(kube_pod_info{nodename!=""})))
        - record: node:namespace:kube_pod_container_status_waiting_reason:sum
          expr: sum by (node, namespace, reason)(kube_pod_container_status_waiting_reason * on(pod) group_left(node) (sum by (node, namespace, pod)(kube_pod_info{nodename!=""})))

        # Count the number of observed kubelet versions
        - record: node:kubelet_version:count
          expr: count by (kubelet_version)(label_replace(kube_node_info, "kubelet_version", "$1", "kubelet_version", "v([0-9]+\\.[0-9]+).*"))
{{- end }}
