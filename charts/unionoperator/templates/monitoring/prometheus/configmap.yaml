{{- if .Values.union.unionoperatorMonitoring.enabled -}}
{{- if .Values.union.unionoperatorMonitoring.prometheus.critical.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "union-operator.fullname" . }}-prometheus-crit
  labels:
    {{- include "unionoperatorMonitoring.prometheus.critical.labels" . | nindent 4 }}
data:
  prometheus.yml: |
    global:
      scrape_interval:     15s
      evaluation_interval: 15s
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
    rule_files:
      - rules.yml
    scrape_configs:
      - job_name: 'kube-state-metrics'
        static_configs:
        - targets: ['kube-state-metrics.kube-system.svc.cluster.local:{{ .Values.union.unionoperatorMonitoring.kubeStateMetrics.service.port }}']
        metric_relabel_configs:
        - separator: ;
          source_labels: [__name__]
          regex: kube_node_labels|kube_node_status_condition
          action: keep
  rules.yml: |
    groups:
      - name: rollup
        rules:
        - record: instance_type:kube_node_labels:sum
          expr: sum by (label_cloud_google_com_gke_accelerator, label_cloud_google_com_gke_preemptible, label_eks_amazonaws_com_capacity_type, label_flyte_org_node_role, label_node_group_name, label_node_kubernetes_io_instance_type, label_node_pool_name, label_topology_kubernetes_io_region) (kube_node_labels{job="kube-state-metrics"})
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "union-operator.fullname" . }}-prometheus
  labels:
    {{- include "unionoperatorMonitoring.prometheus.labels" . | nindent 4 }}
data:
  prometheus.yml: |
    global:
      scrape_interval:     15s
      evaluation_interval: 15s
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
    rule_files:
      - rules.yml
    scrape_configs:
      - job_name: 'prometheus'
        metrics_path: /prometheus/metrics
        static_configs:
        - targets: ['localhost:9090']
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: prometheus_tsdb_head_chunks_storage_size_bytes|prometheus_tsdb_head_series|prometheus_tsdb_head_series_created_total|prometheus_tsdb_head_series_removed_total|prometheus_tsdb_head_samples_appended_total|prometheus_tsdb_storage_blocks_bytes|prometheus_tsdb_retention_limit_bytes|prometheus_tsdb_wal_storage_size_bytes
          action: keep
      - job_name: 'kube-state-metrics'
        static_configs:
        - targets: ['kube-state-metrics.kube-system.svc.cluster.local:{{ .Values.union.unionoperatorMonitoring.kubeStateMetrics.service.port }}']
        metric_relabel_configs:
        - separator: ;
          source_labels: [__name__]
          regex: kube_pod_container_resource_(limits|requests)|kube_pod_status_phase|kube_node_(labels|status_condition)|kube_namespace_labels
          action: keep
        - separator: ;
          source_labels: [__name__, phase]
          regex: kube_pod_status_phase;(Succeeded|Failed)
          action: drop
        {{- with .Values.union.unionoperatorMonitoring.scrapeConfigs.kubeStateMetrics.extraMetricRelabelConfigs }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      - job_name: 'gpu-metrics'
        static_configs:
        - targets: ['dcgm-exporter.kube-system.svc.cluster.local:{{ .Values.union.unionoperatorMonitoring.dcgmExporter.service.port }}']
      - job_name: kubernetes-cadvisor
        metrics_path: /metrics
        scheme: https
        kubernetes_sd_configs:
        - api_server: null
          role: node
          namespaces:
            names: []
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: false
        metric_relabel_configs:
        - separator: ;
          source_labels: [__name__]
          regex: container_cpu_usage_seconds_total|container_memory_working_set_bytes
          action: keep
        relabel_configs:
        - separator: ;
          regex: __meta_kubernetes_node_label_(.+)
          replacement: $1
          action: labelmap
        - separator: ;
          regex: (.*)
          target_label: __address__
          replacement: kubernetes.default.svc:443
          action: replace
        - source_labels: [__meta_kubernetes_node_name]
          separator: ;
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
          action: replace
      - job_name: 'union-metrics'
        static_configs:
        - targets: ['{{ include "union-operator.fullname" . }}.{{ include "union-operator.namespace" . }}.svc.cluster.local']
      {{- if .Values.union.unionoperatorMonitoring.flytePropeller.enabled }}
      - job_name: 'flyte-propeller'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - "{{ include "union-operator.namespace" . }}"
          selectors:
          - role: "pod"
            label: "app=flytepropeller"
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: "flyte:propeller:all:free_workers_count|\
            flyte:propeller:all:gc_latency_ms|\
            flyte:propeller:all:metastore:write_unlabeled_ms|\
            flyte:propeller:all:node:node_exec_latency_unlabeled_us|\
            flyte:propeller:all:node:perma_user_error_duration_unlabeled_ms|\
            flyte:propeller:all:node:queueing_latency_ms|\
            flyte:propeller:all:node:transition_latency_unlabeled_ms|\
            flyte:propeller:all:node:user_error_duration_unlabeled_ms|\
            flyte:propeller:all:main_adds|\
            flyte:propeller:all:main_depth|\
            flyte:propeller:all:round:round_time_ms|\
            flyte:propeller:all:wf_update_latency_ms"
          action: keep
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
      {{- end }}
      {{- if and (.Values.union.unionoperatorMonitoring.opencost.enabled) (.Values.union.unionoperatorMonitoring.opencost.scrape) }}
      - job_name: 'opencost'
        honor_labels: true
        scrape_interval: 1m
        static_configs:
        - targets: ['opencost.{{ include "union-operator.namespace" . }}.svc.cluster.local:9003']
        metric_relabel_configs:
        - separator: ;
          source_labels: [__name__]
          regex: container_.*|.*_labels|.*_cost
          action: keep
      {{- end}}
      {{- with .Values.union.unionoperatorMonitoring.extraScrapeConfigs }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
  rules.yml: |
    groups:
      - name: rollup
        rules:
        - record: instance_type:kube_node_labels:sum
          expr: sum by (label_cloud_google_com_gke_accelerator, label_cloud_google_com_gke_preemptible, label_eks_amazonaws_com_capacity_type, label_flyte_org_node_role, label_node_group_name, label_node_kubernetes_io_instance_type, label_node_pool_name, label_topology_kubernetes_io_region) (kube_node_labels{job="kube-state-metrics"})
        - record: phase:kube_pod_status_phase:sum
          expr: sum by (label_union_ai_namespace_type, phase) (kube_pod_status_phase{job="kube-state-metrics"} * on (namespace) group_left(label_union_ai_namespace_type) kube_namespace_labels)
        - record: namespace_phase:kube_pod_status_phase:sum
          expr: sum by (namespace, label_union_ai_namespace_type, phase) (kube_pod_status_phase{job="kube-state-metrics"} * on (namespace) group_left(label_union_ai_namespace_type) kube_namespace_labels)
        - record: namespace_type:pod:container_cpu_usage_seconds_total:count
          expr: count by (label_union_ai_namespace_type) (count  by (namespace, label_union_ai_namespace_type, pod) (container_cpu_usage_seconds_total{pod!="", job="kubernetes-cadvisor"} * on (namespace) group_left(label_union_ai_namespace_type) kube_namespace_labels))
        - record: namespace:pod:container_cpu_usage_seconds_total:count
          expr: count by (namespace, label_union_ai_namespace_type) (count  by (namespace, label_union_ai_namespace_type, pod) (container_cpu_usage_seconds_total{pod!="", job="kubernetes-cadvisor"} * on (namespace) group_left(label_union_ai_namespace_type) kube_namespace_labels))
        - record: pod:container_cpu_usage_seconds_total:sum
          expr: sum by (namespace, pod) (container_cpu_usage_seconds_total{namespace="{{ include "union-operator.namespace" . }}", image!="", job="kubernetes-cadvisor"})
        - record: pod:container_memory_working_set_bytes:sum
          expr: sum by (namespace, pod) (container_memory_working_set_bytes{namespace="{{ include "union-operator.namespace" . }}", image!="", job="kubernetes-cadvisor"})
        - record: pod:kube_pod_container_resource_requests:sum
          expr: sum by (namespace, pod, resource) (kube_pod_container_resource_requests{namespace="{{ include "union-operator.namespace" . }}", resource=~"cpu|memory", job="kube-state-metrics"})
        - record: pod:kube_pod_container_resource_limits:sum
          expr: sum by (namespace, pod, resource) (kube_pod_container_resource_limits{namespace="{{ include "union-operator.namespace" . }}", resource=~"cpu|memory", job="kube-state-metrics"})
        - record: job:up:sum
          expr: sum by (job) (up)
        - record: job:up:count
          expr: count by (job) (up)
        - record: flyte_agent_request_latency_seconds:mean1m
          expr: sum(rate(flyte_agent_request_latency_seconds_sum[1m])) / sum(rate(flyte_agent_request_latency_seconds_count[1m]))
{{- end }}
