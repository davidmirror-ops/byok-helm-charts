---
# Source: union-operator/templates/namespaces.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: flytesnacks-development
---
# Source: union-operator/templates/namespaces.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: flytesnacks-staging
---
# Source: union-operator/templates/namespaces.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: flytesnacks-production
---
# Source: union-operator/charts/kube-prometheus-stack/charts/prometheus-node-exporter/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator-prometheus-node-exporter
  namespace: kube-system
  labels:
    helm.sh/chart: prometheus-node-exporter-4.34.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: prometheus-node-exporter
    app.kubernetes.io/name: prometheus-node-exporter
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "1.8.0"
    jobLabel: node-exporter
    release: union-operator
---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytepropeller
  namespace: union
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v0.1.10
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a Service Account for webhook
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-pod-webhook
  namespace: union
---
# Source: union-operator/templates/cluster-resource-sync.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: clustersync-resource
  namespace: union
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/templates/objectstore/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator-object-store
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator-object-store
    app.kubernetes.io/instance: union-operator-object-store
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v0.0.1"
---
# Source: union-operator/templates/serviceaccount-proxy.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create an empty secret that the first propeller pod will populate
apiVersion: v1
kind: Secret
metadata:
  name: flyte-pod-webhook
  namespace: union
type: Opaque
---
# Source: union-operator/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: union-operator-cluster-name
type: Opaque
data:
  cluster_name: "Y2x1c3Rlcm5hbWU="
---
# Source: union-operator/templates/secret.yaml
# Secrets are required for syncresources, even if running standalone. Add empty secrets until resolved.
apiVersion: v1
kind: Secret
metadata:
  name: flyte-admin-secrets
type: Opaque
---
# Source: union-operator/charts/union/templates/clusterresourcesync/cluster_resource_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clusterresource-template
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  a_namespace.yaml.yaml: | 
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
      labels:
        union.ai/namespace-type: flyte
    spec:
      finalizers:
      - kubernetes
    
  b_default_service_account.yaml.yaml: | 
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: default
      namespace: {{ namespace }}
      annotations:
        {{ defaultUserRoleKey }}: {{ defaultUserRoleValue }}
    
  c_project_resource_quota.yaml.yaml: | 
    apiVersion: v1
    kind: ResourceQuota
    metadata:
      name: project-quota
      namespace: {{ namespace }}
    spec:
      hard:
        limits.cpu: {{ projectQuotaCpu }}
        limits.memory: {{ projectQuotaMemory }}
        requests.nvidia.com/gpu: {{ projectQuotaNvidiaGpu }}
---
# Source: union-operator/charts/union/templates/clusterresourcesync/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-clusterresourcesync-config
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  storage.yaml: | 
    storage:
      type: minio
      container: "my-s3-bucket-prod"
      stow:
        kind: s3
        config:
          access_key_id: minio
          auth_type: accesskey
          secret_key: miniostorage
          disable_ssl: true
          endpoint: http://minio.union.svc.cluster.local:9000
          region: us-east-1
      signedUrl:
        stowConfigOverride:
          endpoint: http://minio.union.svc.cluster.local:9000
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
      cache:
        max_size_mbs: 0
        target_gc_percent: 70
  cluster_resources.yaml: | 
    cluster_resources:
      clusterName: 'clustername'
      customData:
      - production:
        - projectQuotaCpu:
            value: "4096"
        - projectQuotaMemory:
            value: 2Ti
        - projectQuotaNvidiaGpu:
            value: "256"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      - staging:
        - projectQuotaCpu:
            value: "4096"
        - projectQuotaMemory:
            value: 2Ti
        - projectQuotaNvidiaGpu:
            value: "256"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      - development:
        - projectQuotaCpu:
            value: "4096"
        - projectQuotaMemory:
            value: 2Ti
        - projectQuotaNvidiaGpu:
            value: "256"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      refreshInterval: 5m
      standaloneDeployment: true
      templatePath: /etc/flyte/clusterresource/templates
    clusterResourcesPrivate:
      app:
        isSelfServe: false
    union:
      auth:
        authorizationMetadataKey: flyte-authorization
        clientId: 'abcdef'
        clientSecretLocation: /etc/union/secret/app_secret
        tokenRefreshWindow: 5m
        type: ClientSecret
      connection:
        host: 'dns:///playground.hosted.unionai.cloud'
  admin.yaml: | 
    admin:
      clientId: 'abcdef'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: 'dns:///playground.hosted.unionai.cloud'
      insecure: false
    event:
      capacity: 1000
      rate: 500
      type: admin
  domain.yaml: | 
    domains:
    - id: development
      name: development
    - id: staging
      name: staging
    - id: production
      name: production
  clusters.yaml: |
    clusters:
      clusterConfigs: []
      labelClusterMap: {}
---
# Source: union-operator/charts/union/templates/propeller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-propeller-config
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  admin.yaml: | 
    admin:
      clientId: 'abcdef'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: 'dns:///playground.hosted.unionai.cloud'
      insecure: false
    event:
      capacity: 1000
      rate: 500
      type: admin
  catalog.yaml: | 
    catalog-cache:
      cache-endpoint: 'dns:///playground.hosted.unionai.cloud'
      endpoint: 'dns:///playground.hosted.unionai.cloud'
      insecure: false
      type: fallback
      use-admin-auth: true
  copilot.yaml: | 
    plugins:
      k8s:
        co-pilot:
          image: public.ecr.aws/unionai-flyte/flytecopilot:a5098e39861491470c7839c629bb29252dcf9904
          name: flyte-copilot-
          start-timeout: 30s
  core.yaml: | 
    cache:
      max_size_mbs: 1024
      target_gc_percent: 70
    manager:
      pod-application: flytepropeller
      pod-template-container-name: flytepropeller
      pod-template-name: flytepropeller-template
      shard:
        shard-count: 3
        type: Hash
    propeller:
      downstream-eval-duration: 30s
      enable-admin-launcher: true
      event-config:
        raw-output-policy: inline
      gc-interval: 12h
      kube-client-config:
        burst: 25
        qps: 100
        timeout: 30s
      leader-election:
        enabled: false
        lease-duration: 15s
        lock-config-map:
          name: propeller-leader
          namespace: flyte
        renew-deadline: 10s
        retry-period: 2s
      limit-namespace: all
      max-workflow-retries: 50
      metadata-prefix: metadata/propeller
      metrics-prefix: flyte
      prof-port: 10254
      queue:
        batch-size: -1
        batching-interval: 1s
        queue:
          base-delay: 0s
          capacity: 10000
          max-delay: 60s
          rate: 1000
          type: maxof
        sub-queue:
          capacity: 10000
          rate: 1000
          type: bucket
        type: batch
      rawoutput-prefix: 's3://my-s3-bucket'
      workers: 100
      workflow-reeval-duration: 30s
    webhook:
      certDir: /etc/webhook/certs
      serviceName: flyte-pod-webhook
  enabled_plugins.yaml: | 
    tasks:
      task-plugins:
        default-for-task-types:
          container: container
          container_array: k8s-array
          sidecar: sidecar
        enabled-plugins:
        - container
        - echo
        - sidecar
        - k8s-array
  k8s.yaml: | 
    plugins:
      k8s:
        default-cpus: 100m
        default-env-vars:
        - FLYTE_AWS_ENDPOINT: http://minio.union.svc.cluster.local:9000
        - FLYTE_AWS_ACCESS_KEY_ID: minio
        - FLYTE_AWS_SECRET_ACCESS_KEY: miniostorage
        default-memory: 100Mi
  logger.yaml: | 
    logger:
      level: 4
      show-source: true
  resource_manager.yaml: | 
    propeller:
      resourcemanager:
        type: noop
  storage.yaml: | 
    storage:
      type: minio
      container: "my-s3-bucket-prod"
      stow:
        kind: s3
        config:
          access_key_id: minio
          auth_type: accesskey
          secret_key: miniostorage
          disable_ssl: true
          endpoint: http://minio.union.svc.cluster.local:9000
          region: us-east-1
      signedUrl:
        stowConfigOverride:
          endpoint: http://minio.union.svc.cluster.local:9000
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
      cache:
        max_size_mbs: 0
        target_gc_percent: 70
  cache.yaml: |
    storage:
      cache:
        max_size_mbs: 0
        target_gc_percent: 70
  task_logs.yaml: | 
    plugins:
      logs:
        cloudwatch-enabled: false
        kubernetes-enabled: true
---
# Source: union-operator/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    union:
      connection:
        host: dns:///playground.hosted.unionai.cloud
      auth:
        type: ClientSecret
        clientId: abcdef
        clientSecretLocation: /etc/union/secret/app_secret
        authorizationMetadataKey: "flyte-authorization"
        tokenRefreshWindow: 5m
    authorizer:
      type: noop
    operator:
      syncClusterConfig:
        enabled: true
      enabled: true
      enableTunnelService: true
      clusterId:
        organization: playground
      dependenciesHeartbeat:
        propeller:
          endpoint: http://flytepropeller.union.svc.cluster.local:10254
        proxy:
          endpoint: http://union-operator-proxy.union.svc.cluster.local:10254
      clusterData:
        appId: abcdef
        cloudHostName: playground.hosted.unionai.cloud
        metadataBucketPrefix: s3://my-s3-bucket
        bucketName:  my-s3-bucket
        bucketRegion: us-east-2
        userRoleKey: foo
        userRole: bar
        storageType: sandbox
        gcpProjectId: dummy-gcs-projectId
      collectUsages:
        enabled: true
      computeResourceManager:
        
        enabled: false
        type: ""
  logger.yaml: |
    logger:
      level: 4
      show-source: true
  storage.yaml: | 
    storage:
      container: "my-s3-bucket-prod"
      type: minio
      stow:
        kind: s3
        config:
          access_key_id: minio
          auth_type: accesskey
          secret_key: miniostorage
          disable_ssl: true
          endpoint: http://minio.union.svc.cluster.local:9000
          region: us-east-1
      signedUrl:
        stowConfigOverride:
          endpoint: http://localhost:30084
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
      cache:
        max_size_mbs: 0
        target_gc_percent: 70
---
# Source: union-operator/charts/union/templates/propeller/crds/flyteworkflow.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: flyteworkflows.flyte.lyft.com
spec:
  group: flyte.lyft.com
  names:
    kind: FlyteWorkflow
    plural: flyteworkflows
    shortNames:
      - fly
    singular: flyteworkflow
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          x-kubernetes-preserve-unknown-fields: true
          properties:
---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v0.1.10
    app.kubernetes.io/managed-by: Helm
rules:
# Allow RO access to PODS
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
# Allow Event recording access
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - delete
  - patch
# Allow Access All plugin objects
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
# Allow Access to CRD
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
# Allow Access to all resources under flyte.lyft.com
- apiGroups:
  - flyte.lyft.com
  resources:
  - flyteworkflows
  - flyteworkflows/finalizers
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
  - post
  - deletecollection
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a ClusterRole for the webhook
# https://kubernetes.io/docs/admin/authorization/rbac/
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: union-flyte-pod-webhook
  namespace: union
rules:
  - apiGroups:
      - "*"
    resources:
      - mutatingwebhookconfigurations
      - secrets
      - pods
      - replicasets/finalizers
    verbs:
      - get
      - create
      - update
      - patch
---
# Source: union-operator/templates/cluster-resource-sync.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustersync-resource
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
      - rbac.authorization.k8s.io
    resources:
      - configmaps
      - namespaces
      - pods
      - resourcequotas
      - roles
      - rolebindings
      - secrets
      - services
      - serviceaccounts
      - clusterrolebindings
    verbs:
      - '*'
---
# Source: union-operator/templates/serviceaccount-proxy.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - '*'
    resources:
      - events
      - flyteworkflows
      - pods/log
      - pods
      - rayjobs
      - resourcequotas
    verbs:
      - get
      - list
      - watch
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
  # Allow Access to all resources under flyte.lyft.com
  - apiGroups:
      - flyte.lyft.com
    resources:
      - flyteworkflows
      - flyteworkflows/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
      - patch
      - post
      - deletecollection
  - apiGroups:
      - '*'
    resources:
      - resourcequotas
      - pods
      - configmaps
      - podtemplates
      - nodes
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  - apiGroups:
      - serving.knative.dev
    resources:
      - revisions
      - configurations
      - services
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v0.1.10
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-flytepropeller
subjects:
- kind: ServiceAccount
  name: flytepropeller
  namespace: union
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a binding from Role -> ServiceAccount
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: union-flyte-pod-webhook
  namespace: union
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-flyte-pod-webhook
subjects:
  - kind: ServiceAccount
    name: flyte-pod-webhook
    namespace: union
---
# Source: union-operator/templates/cluster-resource-sync.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustersync-resource
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustersync-resource
subjects:
  - kind: ServiceAccount
    name: clustersync-resource
    namespace: union
---
# Source: union-operator/templates/cluster-resource-sync.yaml
# This role binding is required in order to create
# other CRBs that grant the system:auth-delegator permission.
#
# This is primarily used by customers using HashiCorp Vault and
# Kubernetes Authentication.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustersync-resource-auth-delegator
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: clustersync-resource
    namespace: union
---
# Source: union-operator/templates/objectstore/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-operator-object-store
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator-object-store
    app.kubernetes.io/instance: union-operator-object-store
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v0.0.1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: union-operator-object-store
    namespace: union
---
# Source: union-operator/templates/serviceaccount-proxy.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-operator-proxy
subjects:
  - kind: ServiceAccount
    name: union-operator-proxy
    namespace: union
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-operator
subjects:
  - kind: ServiceAccount
    name: union-operator
    namespace: union
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - '*'
    resources:
      - secrets
      - deployments
    verbs:
      - get
      - list
      - watch
      - create
      - update
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: union-operator
subjects:
  - kind: ServiceAccount
    name: union-operator
    namespace: union
---
# Source: union-operator/charts/kube-prometheus-stack/charts/prometheus-node-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: union-operator-prometheus-node-exporter
  namespace: kube-system
  labels:
    helm.sh/chart: prometheus-node-exporter-4.34.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: prometheus-node-exporter
    app.kubernetes.io/name: prometheus-node-exporter
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "1.8.0"
    jobLabel: node-exporter
    release: union-operator
  annotations:
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - port: 9100
      targetPort: 9100
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: prometheus-node-exporter
    app.kubernetes.io/instance: union-operator
---
# Source: union-operator/charts/union/templates/propeller/service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: union
  name: flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      protocol: TCP
      port: 10254
    - name: fasttask
      port: 15605
      protocol: TCP
      targetPort: 15605
  selector: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Service
apiVersion: v1
kind: Service
metadata:
  name: flyte-pod-webhook
  namespace: union
  annotations: 
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  selector:
    app: flyte-pod-webhook
  ports:
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9443
---
# Source: union-operator/templates/minio/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: union
  labels: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: minio
    port: 9000
    protocol: TCP
    targetPort: minio
  - name: minio-console
    port: 9001
    protocol: TCP
    targetPort: minio-console
  selector: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: union-operator
---
# Source: union-operator/templates/service-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator-proxy
    app.kubernetes.io/instance: union-operator-proxy
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v0.0.1"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 10254
      targetPort: debug
      protocol: TCP
      name: debug
  selector:
    app.kubernetes.io/name: union-operator-proxy
    app.kubernetes.io/instance: union-operator-proxy
---
# Source: union-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: debug
      protocol: TCP
      name: debug
  selector:
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
---
# Source: union-operator/charts/kube-prometheus-stack/charts/prometheus-node-exporter/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: union-operator-prometheus-node-exporter
  namespace: kube-system
  labels:
    helm.sh/chart: prometheus-node-exporter-4.34.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: prometheus-node-exporter
    app.kubernetes.io/name: prometheus-node-exporter
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "1.8.0"
    jobLabel: node-exporter
    release: union-operator
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/instance: union-operator
  revisionHistoryLimit: 10
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        helm.sh/chart: prometheus-node-exporter-4.34.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: metrics
        app.kubernetes.io/part-of: prometheus-node-exporter
        app.kubernetes.io/name: prometheus-node-exporter
        app.kubernetes.io/instance: union-operator
        app.kubernetes.io/version: "1.8.0"
        jobLabel: node-exporter
        release: union-operator
    spec:
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      priorityClassName: system-node-critical
      serviceAccountName: union-operator-prometheus-node-exporter
      containers:
        - name: node-exporter
          image: quay.io/prometheus/node-exporter:v1.8.0
          imagePullPolicy: IfNotPresent
          args:
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
            - --path.rootfs=/host/root
            - --path.udev.data=/host/root/run/udev/data
            - --web.listen-address=[$(HOST_IP)]:9100
            - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
            - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs|tmpfs)$
            - --no-collector.arp
            - --no-collector.bonding
            - --no-collector.btrfs
            - --no-collector.cpufreq
            - --no-collector.edac
            - --no-collector.ethtool
            - --no-collector.entropy
            - --no-collector.fibrechannel
            - --no-collector.filefd
            - --no-collector.hwmon
            - --no-collector.infiniband
            - --no-collector.ipvs
            - --no-collector.nfs
            - --no-collector.nfsd
            - --no-collector.powersupplyclass
            - --no-collector.rapl
            - --no-collector.schedstat
            - --no-collector.sockstat
            - --no-collector.softnet
            - --no-collector.textfile
            - --no-collector.thermal_zone
            - --no-collector.timex
            - --no-collector.udp_queues
            - --no-collector.mdadm
            - --collector.conntrack
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: HOST_IP
              value: 0.0.0.0
          ports:
            - name: http-metrics
              containerPort: 9100
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              path: /
              port: 9100
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              path: /
              port: 9100
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 50m
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 10Mi
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly:  true
            - name: sys
              mountPath: /host/sys
              readOnly: true
            - name: root
              mountPath: /host/root
              mountPropagation: HostToContainer
              readOnly: true
      hostNetwork: true
      hostPID: true
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: root
          hostPath:
            path: /
---
# Source: union-operator/templates/monitoring/dcgm-exporter/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: dcgm-exporter
  namespace: kube-system
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: dcgm-exporter
    app.kubernetes.io/instance: union-operator-dcgm-exporter
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "dcgm-exporter"
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: dcgm-exporter
      app.kubernetes.io/instance: union-operator-dcgm-exporter
      app.kubernetes.io/component: "dcgm-exporter"
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: dcgm-exporter
        app.kubernetes.io/instance: union-operator-dcgm-exporter
        app.kubernetes.io/component: "dcgm-exporter"
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: dcgm-exporter
      securityContext:
        {}
      volumes:
        - name: "pod-gpu-resources"
          hostPath:
            path: /var/lib/kubelet/pod-resources
        - name: "nvidia-install-dir-host"
          hostPath:
            path: "/home/kubernetes/bin/nvidia"
      containers:
        - name: exporter
          image: "nvcr.io/nvidia/k8s/dcgm-exporter:3.1.7-3.1.4-ubuntu20.04"
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              add:
              - SYS_ADMIN
            privileged: true
            runAsNonRoot: false
            runAsUser: 0
          args:
          - -f
          - /etc/dcgm-exporter/dcp-metrics-included.csv
          env:
            - name: "DCGM_EXPORTER_KUBERNETES"
              value: "true"
            - name: "DCGM_EXPORTER_LISTEN"
              value: ":9400"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - name: "metrics"
              containerPort: 9400
          volumeMounts:
            - name: "pod-gpu-resources"
              readOnly: true
              mountPath: "/var/lib/kubelet/pod-resources"
            - mountPath: /usr/local/nvidia
              name: nvidia-install-dir-host
              readOnly: true
          livenessProbe:
            httpGet:
              path: /health
              port: 9400
            initialDelaySeconds: 45
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 9400
            initialDelaySeconds: 45
          resources:
            limits:
              ephemeral-storage: 500Mi
              memory: 400Mi
            requests:
              cpu: 100m
              ephemeral-storage: 500Mi
              memory: 128Mi
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: ami_type
                operator: In
                values:
                - AL2_x86_64_GPU
            - matchExpressions:
              - key: cloud.google.com/gke-accelerator
                operator: Exists
      tolerations:
        - effect: NoSchedule
          key: flyte.org/node-role
          operator: Exists
        - effect: NoSchedule
          key: nvidia.com/gpu
          operator: Exists
---
# Source: union-operator/charts/union/templates/clusterresourcesync/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: syncresources
  namespace: union
  labels: 
    app.kubernetes.io/name: flyteclusterresourcesync
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteclusterresourcesync
      app.kubernetes.io/instance: union-operator
  template:
    metadata:
      annotations:
        configChecksum: "d3ab92700f8eebc1dc76d798c1f1a9a130d00210ed1e299cd8df7062f3eb606"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels: 
        app.kubernetes.io/name: flyteclusterresourcesync
        app.kubernetes.io/instance: union-operator
        helm.sh/chart: union-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - command:
            - clusterresource
            - --config
            - /etc/flyte/config/*.yaml
            - clusterresource
            - run
          env:
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                resource: limits.memory
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                resource: limits.cpu
          image: "public.ecr.aws/p0i0a9q8/unionoperator:invalid-version"
          imagePullPolicy: "IfNotPresent"
          name: sync-cluster-resources
          resources:
            limits:
              cpu: "1"
              memory: 500Mi
            requests:
              cpu: 500m
              memory: 100Mi
          volumeMounts:
          - name: auth
            mountPath: /etc/secrets/
          - mountPath: /etc/flyte/clusterresource/templates
            name: resource-templates
          - mountPath: /etc/flyte/config
            name: config-volume
          - mountPath: /etc/union/secret
            name: union-cloud-auth
          ports:
          - containerPort: 10254
            name: debug
            protocol: TCP
      serviceAccountName: clustersync-resource
      volumes:
        
        - configMap:
            name: clusterresource-template
          name: resource-templates
        - configMap:
            name: flyte-clusterresourcesync-config
          name: config-volume
        - name: auth
          secret:
            secretName: union-base
        - name: union-cloud-auth
          secret:
            secretName: union-base
---
# Source: union-operator/charts/union/templates/propeller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: union
  name: flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flytepropeller
      app.kubernetes.io/instance: union-operator
  template:
    metadata:
      annotations:
        configChecksum: "18e978086264494db85942e14a749068f6fe9be299b9dcaaa2c0010af1c7b69"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "10254"
      labels: 
        app.kubernetes.io/name: flytepropeller
        app.kubernetes.io/instance: union-operator
        helm.sh/chart: union-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext: 
        fsGroup: 65534
        fsGroupChangePolicy: Always
        runAsUser: 1001
      priorityClassName: system-cluster-critical
      containers:
      - command:
        - flytepropeller
        - --config
        - /etc/flyte/config/*.yaml
        - --propeller.cluster-id
        - 'clustername'
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        image: "public.ecr.aws/p0i0a9q8/unionoperator:invalid-version"
        imagePullPolicy: "IfNotPresent"
        name: flytepropeller
        ports:
        - containerPort: 10254
        resources:
          limits:
            cpu: "4"
            ephemeral-storage: 500Mi
            memory: 8Gi
          requests:
            cpu: 3000m
            ephemeral-storage: 100Mi
            memory: 4Gi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/flyte/config
        - name: auth
          mountPath: /etc/secrets/
        terminationMessagePolicy: "FallbackToLogsOnError"
      serviceAccountName: flytepropeller
      volumes:
      - configMap:
          name: flyte-propeller-config
        name: config-volume
      - name: auth
        secret:
          secretName: union-base
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create the actual deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyte-pod-webhook
  namespace: union
  labels:
    app: flyte-pod-webhook
spec:
  selector:
    matchLabels:
      app: flyte-pod-webhook
  template:
    metadata:
      labels:
        app: flyte-pod-webhook
        app.kubernetes.io/name: flyte-pod-webhook
        app.kubernetes.io/version: invalid-version
      annotations:
        configChecksum: "18e978086264494db85942e14a749068f6fe9be299b9dcaaa2c0010af1c7b69"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "10254"
    spec:
      securityContext: 
        fsGroup: 65534
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions:
          type: spc_t
      serviceAccountName: flyte-pod-webhook
      initContainers:
      - name: generate-secrets
        image: "public.ecr.aws/p0i0a9q8/unionoperator:invalid-version"
        imagePullPolicy: "IfNotPresent"
        command:
          - flytepropeller
        args:
          - webhook
          - init-certs
          - --config
          - /etc/flyte/config/*.yaml
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                resource: limits.memory
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                resource: limits.cpu
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
          - name: config-volume
            mountPath: /etc/flyte/config
      containers:
        - name: webhook
          image: "public.ecr.aws/p0i0a9q8/unionoperator:invalid-version"
          imagePullPolicy: "IfNotPresent"
          command:
            - flytepropeller
          args:
            - webhook
            - --config
            - /etc/flyte/config/*.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
          ports:
          - containerPort: 9443
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          resources:
            requests:
              cpu: 200m
              ephemeral-storage: 500Mi
              memory: 500Mi
          volumeMounts:
            - name: config-volume
              mountPath: /etc/flyte/config
              readOnly: true
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: flyte-propeller-config
        - name: webhook-certs
          secret:
            secretName: flyte-pod-webhook
---
# Source: union-operator/templates/deployment-proxy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator-proxy
    app.kubernetes.io/instance: union-operator-proxy
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v0.0.1"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: union-operator-proxy
      app.kubernetes.io/instance: union-operator-proxy
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: union-operator-proxy
        app.kubernetes.io/instance: union-operator-proxy
    spec:
      volumes:
        - name: config-volume
          projected:
            sources:
            - configMap:
                name: union-operator
            - configMap:
                name: flyte-clusterresourcesync-config
      priorityClassName: system-cluster-critical
      serviceAccountName: union-operator-proxy
      securityContext:
        {}
      containers:
        - name: union-operator-proxy
          securityContext:
            {}
          image: "public.ecr.aws/p0i0a9q8/unionoperator:invalid-tag"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: "1"
              ephemeral-storage: 500Mi
              memory: 1Gi
            requests:
              cpu: 100m
              ephemeral-storage: 100Mi
              memory: 128Mi
          volumeMounts:
            - mountPath: /etc/union/config
              name: config-volume
          args:
            - operator
            - proxy
            - --config
            - /etc/union/config/*.yaml
          ports:
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
---
# Source: union-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: union-operator
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: union-operator
      app.kubernetes.io/instance: union-operator
  template:
    metadata:
      annotations:
        configChecksum: "133b1d0090a7e55b7836a59b133d1c450b58c4678f040c8ab467fc4009c9669"
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: union-operator
        app.kubernetes.io/instance: union-operator
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: union-operator
      securityContext:
        {}
      volumes:
        - name: config-volume
          configMap:
            name: union-operator
        - name: secret-volume
          secret:
            secretName: union-base
      containers:
        - name: union-operator
          securityContext:
            {}
          image: "public.ecr.aws/p0i0a9q8/unionoperator:invalid-tag"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: "4"
              ephemeral-storage: 500Mi
              memory: 8Gi
            requests:
              cpu: "1"
              ephemeral-storage: 100Mi
              memory: 4Gi
          volumeMounts:
            - mountPath: /etc/union/config
              name: config-volume
            - mountPath: /etc/union/secret
              name: secret-volume
          env:
            - name: CLUSTER_NAME
              valueFrom:
                secretKeyRef:
                  name: union-operator-cluster-name
                  key: cluster_name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DEPLOYMENT_NAME
              value: union-operator
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
          args:
            - operator
            - serve
            - --config
            - /etc/union/config/*.yaml
            - --operator.clusterId.name
            - "$(CLUSTER_NAME)"
            - --operator.tunnel.k8sSecretName
            - union-base
          ports:
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
        - name: "tunnel"
          securityContext:
            {}
          image: cloudflare/cloudflared:2024.6.1
          imagePullPolicy: IfNotPresent
          args:
            - tunnel
            - --no-autoupdate
            - run
            - --token
            - $(TUNNEL_TOKEN)
          env:
            - name: TUNNEL_TOKEN
              valueFrom:
                secretKeyRef:
                  name: union-base
                  key: tunnel_token
                  optional: true
---
# Source: union-operator/templates/minio/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: union
  labels: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: union-operator
    helm.sh/chart: union-operator-v0.0.1-local
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: union-operator
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: minio
        app.kubernetes.io/instance: union-operator
        helm.sh/chart: union-operator-v0.0.1-local
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - image: "ecr.flyte.org/bitnami/minio:2021.10.13-debian-10-r0"
        imagePullPolicy: "IfNotPresent"
        name: minio
        env:
          - name: MINIO_ACCESS_KEY
            value: minio
          - name: MINIO_SECRET_KEY
            value: miniostorage
          - name: MINIO_DEFAULT_BUCKETS
            value: my-s3-bucket
        ports:
        - containerPort: 9000
          name: minio
        - containerPort: 9001
          name: minio-console
        resources: 
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
        volumeMounts:
        - name: minio-storage
          mountPath: /data
      volumes:
      - name: minio-storage
        emptyDir: {}
